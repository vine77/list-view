eval("(function() {function generateContent(n) {\n  var content = Ember.A();\n  for (var i = 0; i < n; i++) {\n    content.push({name: \"Item \" + (i+1)});\n  }\n  return content;\n}\n\nfunction extractPositionFromTransform(string) {\n  var matched, x, y, position;\n\n  matched = string.match(/translate(?:3d)?\\((-?\\d+)px,\\s*(-?\\d+)px/);\n\n  x = parseInt(matched[1], 10);\n  y = parseInt(matched[2], 10);\n\n  position = {\n    x: x,\n    y: y\n  };\n\n  return position;\n}\n\nfunction extractNumberFromPosition(string) {\n  var number = string.replace(/px/g,\'\');\n  return parseInt(number, 10);\n}\n\nfunction extractPosition(element) {\n  var style, position,\n    transformProp = Ember.ListViewHelper.transformProp;\n\n  style = element.style;\n\n  if (style.top) {\n    position = {\n      y: extractNumberFromPosition(style.top),\n      x: extractNumberFromPosition(style.left)\n    };\n  } else if (style[transformProp]) {\n    position = extractPositionFromTransform(style[transformProp]);\n  }\n\n  return position;\n}\n\nfunction sortElementsByPosition (elements) {\n  return elements.sort(function(a, b){\n    var aPosition, bPosition;\n\n    aPosition = extractPosition(a);\n    bPosition = extractPosition(b);\n\n    if (bPosition.y === aPosition.y){\n      return (aPosition.x - bPosition.x);\n    } else {\n      return (aPosition.y - bPosition.y);\n    }\n  });\n}\n\nfunction sortByPosition (a, b) {\n  var aPosition, bPosition;\n\n  aPosition = a;\n  bPosition = b;\n\n  if (bPosition.y === aPosition.y){\n    return (aPosition.x - bPosition.x);\n  } else {\n    return (aPosition.y - bPosition.y);\n  }\n}\n\nfunction itemPositions(view) {\n  return Ember.A(view.$(\'.ember-list-item-view\').toArray()).map(function(e) {\n    return extractPosition(e);\n  }).sort(sortByPosition);\n}\n\nwindow.helper = {\n  itemPositions: itemPositions,\n  generateContent: generateContent,\n  sortElementsByPosition: sortElementsByPosition,\n  extractPosition: extractPosition\n};\n})();//@ sourceURL=test_helper.js");

eval("(function() {var css, view, helper;\nhelper = window.helper;\n\nfunction appendView() {\n  Ember.run(function() {\n    view.appendTo(\'#qunit-fixture\');\n  });\n}\n\nmodule(\"Ember.ListView integration - Content\", {\n  setup: function() {\n    css = Ember.$(\"<style>\" +\n            \".ember-list-view {\" +\n            \"  overflow: auto;\" +\n            \"  position: relative;\" +\n            \"}\" +\n            \".ember-list-item-view {\" +\n            \"  position: absolute;\" +\n            \"}\" +\n            \".is-selected {\" +\n            \"  background: red;\" +\n            \"}\" +\n            \"</style>\").appendTo(\'head\');\n  },\n  teardown: function() {\n    css.remove();\n\n    Ember.run(function() {\n      if (view) { view.destroy(); }\n    });\n  }\n});\n\ntest(\"the ember-list helper\", function() {\n  var content = helper.generateContent(100);\n\n  view = Ember.View.create({\n    controller: content,\n    template: Ember.Handlebars.compile(\"{{#ember-list height=500 row-height=50}}{{name}}{{/ember-list}}\")\n  });\n\n  appendView();\n\n  equal(view.$(\'.ember-list-item-view\').length, 11, \"The rendered list was updated\");\n  equal(view.$(\'.ember-list-container\').height(), 5000, \"The scrollable view has the correct height\");\n});\n\ntest(\"the ember-list helper uses items=\", function() {\n  var content = helper.generateContent(100);\n\n  view = Ember.View.create({\n    controller: { itemz: content },\n    template: Ember.Handlebars.compile(\"{{#ember-list items=itemz height=500 row-height=50}}{{name}}{{/ember-list}}\")\n  });\n\n  appendView();\n\n  equal(view.$(\'.ember-list-item-view\').length, 11, \"The rendered list was updated\");\n  equal(view.$(\'.ember-list-container\').height(), 5000, \"The scrollable view has the correct height\");\n});\n\ntest(\"replacing the list content\", function() {\n  var content = helper.generateContent(100),\n      height = 500,\n      rowHeight = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      });\n\n  view = Ember.ListView.create({\n    content: content,\n    height: height,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass\n  });\n\n  appendView();\n\n  Ember.run(function() {\n    view.set(\'content\', Ember.A([{name: \'The only item\'}]));\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 1, \"The rendered list was updated\");\n  equal(view.$(\'.ember-list-container\').height(), 50, \"The scrollable view has the correct height\");\n});\n\ntest(\"adding to the front of the list content\", function() {\n  var content = helper.generateContent(100),\n      height = 500,\n      rowHeight = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      });\n\n  view = Ember.ListView.create({\n    content: content,\n    height: height,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass\n  });\n\n  appendView();\n\n  Ember.run(function() {\n    content.unshiftObject({name: \"Item -1\"});\n  });\n\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  equal(Ember.$(positionSorted[0]).text(), \"Item -1\", \"The item has been inserted in the list\");\n  equal(view.$(\'.ember-list-container\').height(), 5050, \"The scrollable view has the correct height\");\n});\n\ntest(\"inserting in the middle of visible content\", function() {\n  var content = helper.generateContent(100),\n      height = 500,\n      rowHeight = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      });\n\n  view = Ember.ListView.create({\n    content: content,\n    height: height,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass\n  });\n\n  appendView();\n\n  Ember.run(function() {\n    content.insertAt(2, {name: \"Item 2\'\"});\n  });\n\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  equal(Ember.$(positionSorted[0]).text(), \"Item 1\", \"The item has been inserted in the list\");\n  equal(Ember.$(positionSorted[2]).text(), \"Item 2\'\", \"The item has been inserted in the list\");\n});\n\ntest(\"clearing the content\", function() {\n  var content = helper.generateContent(100),\n      height = 500,\n      rowHeight = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      });\n\n  view = Ember.ListView.create({\n    content: content,\n    height: height,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass\n  });\n\n  appendView();\n\n  Ember.run(function() {\n    content.clear();\n  });\n\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  equal(positionSorted.length, 0, \"The list should not contain any elements\");\n});\n\ntest(\"deleting the first element\", function() {\n  var content = helper.generateContent(100),\n      height = 500,\n      rowHeight = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      });\n\n  view = Ember.ListView.create({\n    content: content,\n    height: height,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass\n  });\n\n  appendView();\n\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  equal(Ember.$(positionSorted[0]).text(), \"Item 1\", \"The item has been inserted in the list\");\n\n  Ember.run(function() {\n    content.removeAt(0);\n  });\n\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  equal(Ember.$(positionSorted[0]).text(), \"Item 2\", \"The item has been inserted in the list\");\n});\n\n})();//@ sourceURL=content_tests.js");

eval("(function() {var css, view, helper;\nhelper = window.helper;\n\nfunction appendView() {\n  Ember.run(function() {\n    view.appendTo(\'#qunit-fixture\');\n  });\n}\nvar template = Ember.Handlebars.compile(\"<a {{action \'wat\'}}\" +\n    \" href=\'#\'><span class=\'controller\'>{{foo}}</span>\" +\n    \"<span class=\'context\'>{{name}}</span></a>\");\n\nvar dispatcher;\nmodule(\"Ember.ListView controllers\", {\n  setup: function() {\n    css = Ember.$(\"<style>\" +\n            \".ember-list-view {\" +\n            \"  overflow: auto;\" +\n            \"  position: relative;\" +\n            \"}\" +\n            \".ember-list-item-view {\" +\n            \"  position: absolute;\" +\n            \"}\" +\n            \".is-selected {\" +\n            \"  background: red;\" +\n            \"}\" +\n            \"</style>\").appendTo(\'head\');\n\n    dispatcher = Ember.EventDispatcher.create();\n    dispatcher.setup();\n  },\n  teardown: function() {\n    css.remove();\n\n    Ember.run(function() {\n      dispatcher.destroy();\n      if (view) { view.destroy(); }\n    });\n\n    Ember.ENABLE_PROFILING = false;\n  }\n});\n\ntest(\"parent controller\", function() {\n  var watWasCalled = false;\n  var controller = Ember.Controller.extend({\n    foo: \'bar\',\n    actions: {\n      wat: function() {\n        watWasCalled = true;\n      }\n    }\n  }).create();\n\n  view = Ember.ContainerView.create({\n    controller: controller\n  });\n\n  var content = Ember.A([\n    { name: \'entry\' }\n  ]);\n\n  var listView = view.createChildView(Ember.ListView.extend({\n    itemViewClass: Ember.ReusableListItemView.extend({\n      template: template\n    }),\n    height: 500,\n    rowHeight: 50,\n    content: content\n  }));\n\n  appendView();\n\n  Ember.run(function(){\n    view.pushObject(listView);\n  });\n\n  equal(listView.get(\'controller\'), controller);\n  equal(listView.get(\'childViews.firstObject.controller\'), controller);\n\n  equal(listView.$(\'a .controller\').text(), \'\');\n  equal(listView.$(\'a .context\').text(), \'entry\');\n\n  listView.$(\'a\').trigger(\'click\');\n\n  ok(watWasCalled, \'expected correct action bubbling\');\n});\n\ntest(\"itemController\", function() {\n  var container = new Ember.Container();\n  var watWasCalled = false;\n\n  container.register(\'controller:item\', Ember.ObjectController.extend({\n    foo: \'bar\',\n    actions: {\n      wat: function() {\n        watWasCalled = true;\n      }\n    }\n  }));\n\n  var controller = Ember.ArrayController.create({\n    content: Ember.A([ { name: \'entry\' } ]),\n    itemController: \'item\',\n    container: container\n  });\n\n  view = Ember.ContainerView.create();\n\n  var listView = view.createChildView(Ember.ListView.extend({\n    itemViewClass: Ember.ReusableListItemView.extend({\n      template: template\n    }),\n    height: 500,\n    rowHeight: 50,\n    content: controller,\n    container: container\n  }));\n\n  appendView();\n\n  Ember.run(function(){\n    view.pushObject(listView);\n  });\n\n  equal(listView.$(\'a .controller\').text(), \'bar\');\n  equal(listView.$(\'a .context\').text(), \'entry\');\n\n  equal(listView.get(\'childViews.firstObject.controller.foo\'), \'bar\');\n\n  listView.$(\'a\').trigger(\'click\');\n\n  ok(watWasCalled, \'expected correct action bubbling\');\n});\n})();//@ sourceURL=controller_test.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - list-view\');\ntest(\'list-view/helper.js should pass jshint\', function() { \n  ok(true, \'list-view/helper.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=list-view/helper.jshint.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - list-view\');\ntest(\'list-view/list_item_view.js should pass jshint\', function() { \n  ok(true, \'list-view/list_item_view.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=list-view/list_item_view.jshint.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - list-view\');\ntest(\'list-view/list_item_view_mixin.js should pass jshint\', function() { \n  ok(true, \'list-view/list_item_view_mixin.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=list-view/list_item_view_mixin.jshint.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - list-view\');\ntest(\'list-view/list_view.js should pass jshint\', function() { \n  ok(true, \'list-view/list_view.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=list-view/list_view.jshint.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - list-view\');\ntest(\'list-view/list_view_helper.js should pass jshint\', function() { \n  ok(true, \'list-view/list_view_helper.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=list-view/list_view_helper.jshint.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - list-view\');\ntest(\'list-view/list_view_mixin.js should pass jshint\', function() { \n  ok(true, \'list-view/list_view_mixin.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=list-view/list_view_mixin.jshint.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - list-view\');\ntest(\'list-view/main.js should pass jshint\', function() { \n  ok(true, \'list-view/main.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=list-view/main.jshint.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - list-view\');\ntest(\'list-view/reusable_list_item_view.js should pass jshint\', function() { \n  ok(true, \'list-view/reusable_list_item_view.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=list-view/reusable_list_item_view.jshint.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - list-view\');\ntest(\'list-view/virtual_list_scroller_events.js should pass jshint\', function() { \n  ok(true, \'list-view/virtual_list_scroller_events.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=list-view/virtual_list_scroller_events.jshint.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - list-view\');\ntest(\'list-view/virtual_list_view.js should pass jshint\', function() { \n  ok(true, \'list-view/virtual_list_view.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=list-view/virtual_list_view.jshint.js");

eval("(function() {var css, view, helper;\nhelper = window.helper;\n\nfunction appendView() {\n  Ember.run(function() {\n    view.appendTo(\'#qunit-fixture\');\n  });\n}\n\nmodule(\"Ember.ListView Acceptance\", {\n  setup: function() {\n    css = Ember.$(\"<style>\" +\n            \".ember-list-view {\" +\n            \"  overflow: auto;\" +\n            \"  position: relative;\" +\n            \"}\" +\n            \".ember-list-item-view {\" +\n            \"  position: absolute;\" +\n            \"}\" +\n            \".is-selected {\" +\n            \"  background: red;\" +\n            \"}\" +\n            \"</style>\").appendTo(\'head\');\n  },\n  teardown: function() {\n    css.remove();\n\n    Ember.run(function() {\n      if (view) { view.destroy(); }\n    });\n\n    Ember.ENABLE_PROFILING = false;\n  }\n});\n\ntest(\"should exist\", function() {\n  view = Ember.ListView.create({\n    height: 500,\n    rowHeight: 50\n  });\n  appendView();\n  ok(view);\n});\n\ntest(\"should render an empty view when there is no content\", function() {\n  var content = helper.generateContent(0),\n      height = 500,\n      rowHeight = 50,\n      emptyViewHeight = 175,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      }),\n      emptyView = Ember.View.extend({\n        attributeBindings: [\'style\'],\n        classNames: [\'empty-view\'],\n        style: \'height:\' + emptyViewHeight + \'px;\'\n      });\n\n  view = Ember.ListView.create({\n    content: content,\n    height: height,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass,\n    emptyView: emptyView\n  });\n\n  appendView();\n\n  equal(view.get(\'element\').style.height, \"500px\", \"The list view height is correct\");\n  equal(view.$(\'.ember-list-container\').height(), emptyViewHeight, \"The scrollable view has the correct height\");\n\n  equal(view.$(\'.ember-list-item-view\').length, 0, \"The correct number of rows were rendered\");\n  equal(view.$(\'.empty-view\').length, 1, \"The empty view rendered\");\n\n  Ember.run(function () {\n    view.set(\'content\', helper.generateContent(10));\n  });\n\n  equal(view.get(\'element\').style.height, \"500px\", \"The list view height is correct\");\n  equal(view.$(\'.ember-list-container\').height(), 500, \"The scrollable view has the correct height\");\n\n  equal(view.$(\'.ember-list-item-view\').length, 10, \"The correct number of rows were rendered\");\n  equal(view.$(\'.empty-view\').length, 0, \"The empty view is removed\");\n\n  Ember.run(function () {\n    view.set(\'content\', content);\n  });\n\n  equal(view.get(\'element\').style.height, \"500px\", \"The list view height is correct\");\n  equal(view.$(\'.ember-list-container\').height(), emptyViewHeight, \"The scrollable view has the correct height\");\n\n  equal(view.$(\'.ember-list-item-view\').length, 0, \"The correct number of rows were rendered\");\n  equal(view.$(\'.empty-view\').length, 1, \"The empty view rendered\");\n\n  Ember.run(function () {\n      view.set(\'content\', helper.generateContent(10));\n  });\n\n  equal(view.get(\'element\').style.height, \"500px\", \"The list view height is correct\");\n  equal(view.$(\'.ember-list-container\').height(), 500, \"The scrollable view has the correct height\");\n\n  equal(view.$(\'.ember-list-item-view\').length, 10, \"The correct number of rows were rendered\");\n  equal(view.$(\'.empty-view\').length, 0, \"The empty view has been removed\");\n});\n\ntest(\"should render a subset of the full content, based on the height, in the correct positions\", function() {\n  var content = helper.generateContent(100),\n      height = 500,\n      rowHeight = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      });\n\n  view = Ember.ListView.create({\n    content: content,\n    height: height,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass\n  });\n\n  appendView();\n\n  equal(view.get(\'element\').style.height, \"500px\", \"The list view height is correct\");\n  equal(view.$(\'.ember-list-container\').height(), 5000, \"The scrollable view has the correct height\");\n\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n\n  equal(view.$(\'.ember-list-item-view\').length, 11, \"The correct number of rows were rendered\");\n  equal(Ember.$(positionSorted[0]).text(), \"Item 1\");\n  equal(Ember.$(positionSorted[10]).text(), \"Item 11\");\n\n  deepEqual(helper.itemPositions(view).map(yPosition), [0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500]);\n});\n\ntest(\"should render correctly with an initial scrollTop\", function() {\n  var content = helper.generateContent(100),\n      height = 500,\n      rowHeight = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      });\n\n  view = Ember.ListView.create({\n    content: content,\n    height: height,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass,\n    scrollTop: 475\n  });\n\n  appendView();\n\n  equal(view.$(\'.ember-list-item-view\').length, 11, \"The correct number of rows were rendered\");\n\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n\n  equal(Ember.$(positionSorted[0]).text(), \"Item 10\");\n  equal(Ember.$(positionSorted[10]).text(), \"Item 20\");\n\n  deepEqual(helper.itemPositions(view).map(yPosition), [450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950], \"The rows are in the correct positions\");\n});\n\ntest(\"should perform correct number of renders and repositions on short list init\", function () {\n  var content = helper.generateContent(8),\n      height = 60,\n      width = 50,\n      rowHeight = 10,\n      positions = 0,\n      renders = 0,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      });\n\n  Ember.subscribe(\"view.updateContext.render\", {\n    before: function(){},\n    after: function(name, timestamp, payload) {\n      renders++;\n    }\n  });\n\n  Ember.subscribe(\"view.updateContext.positionElement\", {\n    before: function(){},\n    after: function(name, timestamp, payload) {\n      positions++;\n    }\n  });\n\n  view = Ember.ListView.create({\n    content: content,\n    height: height,\n    width: width,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass,\n    scrollTop: 0\n  });\n\n  appendView();\n\n  equal(renders, 7, \"The correct number of renders occured\");\n  equal(positions, 14, \"The correct number of positions occured\");\n});\n\ntest(\"should perform correct number of renders and repositions while short list scrolling\", function () {\n  var content = helper.generateContent(8),\n      height = 60,\n      width = 50,\n      scrollTop = 50,\n      rowHeight = 10,\n      positions = 0,\n      renders = 0,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      });\n\n  if (window.console) {\n    Ember.ENABLE_PROFILING = true;\n  }\n\n  Ember.subscribe(\"view.updateContext.render\", {\n    before: function(){},\n    after: function(name, timestamp, payload) {\n      renders++;\n    }\n  });\n\n  Ember.subscribe(\"view.updateContext.positionElement\", {\n    before: function(){},\n    after: function(name, timestamp, payload) {\n      positions++;\n    }\n  });\n\n  view = Ember.ListView.create({\n    content: content,\n    height: height,\n    width: width,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass,\n    scrollTop: 0\n  });\n\n  appendView();\n\n  Ember.run(function () {\n    view.scrollTo(scrollTop);\n  });\n\n  equal(renders, 14, \"The correct number of renders occured\");\n  equal(positions, 21, \"The correct number of positions occured\");\n});\n\ntest(\"should perform correct number of renders and repositions on long list init\", function () {\n  var content = helper.generateContent(200),\n      height = 50,\n      width = 50,\n      rowHeight = 10,\n      positions = 0,\n      renders = 0,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      });\n\n  Ember.subscribe(\"view.updateContext.render\", {\n    before: function(){},\n    after: function(name, timestamp, payload) {\n      renders++;\n    }\n  });\n\n  Ember.subscribe(\"view.updateContext.positionElement\", {\n    before: function(){},\n    after: function(name, timestamp, payload) {\n      positions++;\n    }\n  });\n\n  view = Ember.ListView.create({\n    content: content,\n    height: height,\n    width: width,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass,\n    scrollTop: 0\n  });\n\n  appendView();\n\n  equal(renders, ((height / 10) + 1),  \"The correct number of renders occurred\");\n  equal(positions, 12, \"The correct number of positions occurred\");\n});\n\ntest(\"should be programatically scrollable\", function() {\n  var content = helper.generateContent(100),\n      height = 500,\n      rowHeight = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      });\n\n  view = Ember.ListView.create({\n    content: content,\n    height: height,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass\n  });\n\n  appendView();\n\n  Ember.run(function() {\n    view.scrollTo(475);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 11, \"The correct number of rows were rendered\");\n  deepEqual(helper.itemPositions(view).map(yPosition), [450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950], \"The rows are in the correct positions\");\n});\n\nfunction yPosition(position){\n  return position.y;\n}\n\nfunction xPosition(position){\n  return position.x;\n}\n\ntest(\"height change\", function(){\n  var content = helper.generateContent(100),\n      height = 500,\n      rowHeight = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      });\n\n  view = Ember.ListView.create({\n    content: content,\n    height: height,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass\n  });\n\n  appendView();\n\n  equal(view.$(\'.ember-list-item-view\').length, 11, \"The correct number of rows were rendered\");\n  deepEqual(helper.itemPositions(view).map(yPosition), [0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500], \"The rows are in the correct positions\");\n\n  Ember.run(function() {\n    view.set(\'height\', 100);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 3, \"The correct number of rows were rendered\");\n  deepEqual(helper.itemPositions(view).map(yPosition), [0, 50, 100], \"The rows are in the correct positions\");\n\n  Ember.run(function() {\n    view.set(\'height\', 50);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered\");\n  deepEqual(helper.itemPositions(view).map(yPosition), [0, 50], \"The rows are in the correct positions\");\n\n  Ember.run(function() {\n    view.set(\'height\', 100);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 3, \"The correct number of rows were rendered\");\n  deepEqual(helper.itemPositions(view).map(yPosition), [0, 50, 100], \"The rows are in the correct positions\" );\n});\n\ntest(\"adding a column, when everything is already within viewport\", function(){\n  // start off with 2x3 grid visible and 4 elements\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element, ?: no element\n  //\n  // x x  --|\n  // x x    |- viewport\n  // ? ?  --|\n  var content = helper.generateContent(4),\n      width = 100,\n      height = 150,\n      rowHeight = 50,\n      elementWidth = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"A:{{name}}{{view view.NestedViewClass}}\"),\n        NestedViewClass: Ember.View.extend({\n          tagName: \'span\',\n          template: Ember.Handlebars.compile(\"B:{{name}}\")\n        })\n      });\n\n  view = Ember.ListView.create({\n    content: content,\n    width: width,\n    height: height,\n    rowHeight: rowHeight,\n    elementWidth: elementWidth,\n    itemViewClass: itemViewClass,\n    scrollTop: 0\n  });\n\n  appendView();\n\n  deepEqual(helper.itemPositions(view), [\n            { x:  0, y:    0 }, { x: 50, y:    0 },\n            { x:  0, y:   50 }, { x: 50, y:   50 }\n            ], \"initial render: The rows are rendered in the correct positions\");\n\n  equal(view.$(\'.ember-list-item-view\').length, 4, \"initial render: The correct number of rows were rendered\");\n\n  // rotate to a with 3x2 grid visible and 8 elements\n  // rapid dimension changes\n  Ember.run(function() {\n    view.set(\'width\',  140);\n  });\n\n  Ember.run(function() {\n    view.set(\'width\',  150);\n  });\n\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\n  //\n  // x x x --|\n  // x ? ?   |- viewport\n  // ? ? ? --|\n\n  equal(view.$(\'.ember-list-item-view\').length, 4, \"after width + height change: the correct number of rows were rendered\");\n\n  deepEqual(helper.itemPositions(view), [\n            { x:  0, y:  0 }, { x: 50, y: 0 }, { x: 100, y: 0 },\n            { x:  0, y: 50 }\n            ], \"after width + height change: The rows are in the correct positions\");\n\n  var sortedElements = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  var texts = Ember.$.map(sortedElements, function(el){ return Ember.$(el).text(); });\n  deepEqual(texts, [\n             \'A:Item 1B:Item 1\',\n             \'A:Item 2B:Item 2\',\n             \'A:Item 3B:Item 3\',\n             \'A:Item 4B:Item 4\'\n            ], \'after width + height change: elements should be rendered in expected position\');\n});\n\ntest(\"height and width change after with scroll – simple\", function(){\n  // start off with 2x3 grid visible and 10 elements, at top of scroll\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\n  //\n  // x x  --|\n  // x x    |- viewport\n  // x x  --|\n  // + +\n  // 0 0\n  var content = helper.generateContent(10),\n      width = 100,\n      height = 150,\n      rowHeight = 50,\n      elementWidth = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"A:{{name}}{{view view.NestedViewClass}}\"),\n        NestedViewClass: Ember.View.extend({\n          tagName: \'span\',\n          template: Ember.Handlebars.compile(\"B:{{name}}\")\n        })\n      });\n\n  view = Ember.ListView.create({\n    content: content,\n    width: width,\n    height: height,\n    rowHeight: rowHeight,\n    elementWidth: elementWidth,\n    itemViewClass: itemViewClass,\n    scrollTop: 0\n  });\n\n  appendView();\n\n  deepEqual(helper.itemPositions(view), [\n            { x:  0, y:    0 }, { x: 50, y:    0 },\n            { x:  0, y:   50 }, { x: 50, y:   50 },\n            { x:  0, y:  100 }, { x: 50, y:  100 },\n            { x:  0, y:  150 }, { x: 50, y:  150 }\n            ], \"initial render: The rows are rendered in the correct positions\");\n\n  equal(view.$(\'.ember-list-item-view\').length, 8, \"initial render: The correct number of rows were rendered\");\n\n  // user is scrolled near the bottom of the list\n  Ember.run(function(){\n    view.scrollTo(101);\n  });\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\n  //\n  // 0 0\n  // o o\n  // x x --|\n  // x x   |- viewport\n  // x x --|\n\n  equal(view.$(\'.ember-list-item-view\').length, 8, \"after scroll: The correct number of rows were rendered\");\n\n  deepEqual(helper.itemPositions(view), [\n              { x: 0, y:  50 }, { x: 50, y:  50 },\n              { x: 0, y: 100 }, { x: 50, y: 100 },\n              { x: 0, y: 150 }, { x: 50, y: 150 },\n/* padding */ { x: 0, y: 200 }, { x: 50, y: 200 }], \"after scroll: The rows are in the correct positions\");\n\n  // rotate to a with 3x2 grid visible and 8 elements\n  Ember.run(function() {\n    view.set(\'width\',  150);\n    view.set(\'height\', 100);\n  });\n\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\n  //\n  // 0 0 0\n  // x x x\n  // x x x --|\n  // x o o --|- viewport\n\n  equal(view.$(\'.ember-list-item-view\').length, 9, \"after width + height change: the correct number of rows were rendered\");\n\n  deepEqual(helper.itemPositions(view), [\n    /*              */  { x:  50, y:   0 }, { x: 100, y:   0 },\n    { x:   0, y:  50 }, { x:  50, y:  50 }, { x: 100, y:  50 },\n    { x:   0, y: 100 }, { x:  50, y: 100 }, { x: 100, y: 100 },\n    { x:   0, y: 150 }], \"after width + height change: The rows are in the correct positions\");\n\n  var sortedElements = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  var texts = Ember.$.map(sortedElements, function(el){ return Ember.$(el).text(); });\n  deepEqual(texts, [\n    \'A:Item 2B:Item 2\',\n    \'A:Item 3B:Item 3\',\n    \'A:Item 4B:Item 4\',\n    \'A:Item 5B:Item 5\',\n    \'A:Item 6B:Item 6\',\n    \'A:Item 7B:Item 7\',\n    \'A:Item 8B:Item 8\',\n    \'A:Item 9B:Item 9\',\n    \'A:Item 10B:Item 10\',\n  ], \'after width + height change: elements should be rendered in expected position\');\n});\n\ntest(\"height and width change after with scroll – 1x2 -> 2x2 with 5 items\", function(){\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\n  //\n  // x  --|\n  // x  --|- viewport\n  // +\n  // 0\n  // 0\n  var content = helper.generateContent(5),\n      width = 50,\n      height = 100,\n      rowHeight = 50,\n      elementWidth = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"A:{{name}}{{view view.NestedViewClass}}\"),\n        NestedViewClass: Ember.View.extend({\n          tagName: \'span\',\n          template: Ember.Handlebars.compile(\"B:{{name}}\")\n        })\n      });\n\n  view = Ember.ListView.create({\n    content: content,\n    width: width,\n    height: height,\n    rowHeight: rowHeight,\n    elementWidth: elementWidth,\n    itemViewClass: itemViewClass,\n    scrollTop: 0\n  });\n\n  appendView();\n\n  deepEqual(helper.itemPositions(view), [\n            { x:  0, y:    0 },\n            { x:  0, y:   50 },\n            { x:  0, y:  100 }\n            ], \"initial render: The rows are rendered in the correct positions\");\n\n  equal(view.$(\'.ember-list-item-view\').length, 3, \"initial render: The correct number of rows were rendered\");\n\n  // user is scrolled near the bottom of the list\n  Ember.run(function(){\n    view.scrollTo(151);\n  });\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\n  //\n  // 0\n  // 0\n  // o\n  // x --|\n  // x --|- viewport\n  // 0\n  equal(view.$(\'.ember-list-item-view\').length, 3, \"after scroll: The correct number of rows were rendered\");\n\n  deepEqual(helper.itemPositions(view), [\n              { x: 0, y: 100 },\n              { x: 0, y: 150 },\n/* padding */ { x: 0, y: 200 }], \"after scroll: The rows are in the correct positions\");\n\n  // rotate to a with 2x2 grid visible and 8 elements\n  Ember.run(function() {\n    view.set(\'width\',  100);\n    view.set(\'height\', 100);\n  });\n\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\n  //\n  // 0 0\n  // x x --|\n  // x o --|- viewport\n  // o\n  equal(view.$(\'.ember-list-item-view\').length, 5, \"after width + height change: the correct number of rows were rendered\");\n\n  deepEqual(helper.itemPositions(view), [\n    { x: 0, y:   0 }, { x: 50, y:   0 },\n    { x: 0, y:  50 }, { x: 50, y:  50 },\n    { x: 0, y: 100 }\n  ], \"The rows are in the correct positions\");\n\n  var sortedElements = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  var texts = Ember.$.map(sortedElements, function(el){ return Ember.$(el).text(); });\n\n  deepEqual(texts, [\n    \'A:Item 1B:Item 1\', \'A:Item 2B:Item 2\',\n    \'A:Item 3B:Item 3\', \'A:Item 4B:Item 4\',\n    \'A:Item 5B:Item 5\'\n  ], \'elements should be rendered in expected position\');\n});\n\ntest(\"elementWidth change\", function(){\n  var i,\n      positionSorted,\n      content = helper.generateContent(100),\n      height = 200,\n      width = 200,\n      rowHeight = 50,\n      elementWidth = 100,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      });\n\n  view = Ember.ListView.create({\n    content: content,\n    height: height,\n    width: width,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass,\n    elementWidth: elementWidth\n  });\n\n  appendView();\n\n  equal(view.$(\'.ember-list-item-view\').length, 10, \"The correct number of rows were rendered\");\n  deepEqual(helper.itemPositions(view), [\n            { x:0,   y: 0   },\n            { x:100, y: 0   },\n            { x:0,   y: 50  },\n            { x:100, y: 50  },\n            { x:0 ,  y: 100 },\n            { x:100, y: 100 },\n            { x:0,   y: 150 },\n            { x:100, y: 150 },\n            { x:0,   y: 200 },\n            { x:100, y: 200 }], \"The rows are in the correct positions\");\n\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n\n  for(i = 0; i < 10; i++) {\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i+1));\n  }\n\n  Ember.run(function() {\n    view.set(\'width\', 100);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 5, \"The correct number of rows were rendered\");\n\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n\n  deepEqual(helper.itemPositions(view), [\n            { x: 0, y: 0},\n            { x: 0, y: 50},\n            { x: 0, y: 100},\n            { x: 0, y: 150},\n            { x: 0, y: 200}\n  ], \"The rows are in the correct positions\");\n\n  for(i = 0; i < 5; i++) {\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i+1));\n  }\n\n  // Test a width smaller than elementWidth, should behave the same as width === elementWidth\n  Ember.run(function () {\n    view.set(\'width\', 50);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 5, \"The correct number of rows were rendered\");\n\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n\n  deepEqual(helper.itemPositions(view), [\n            { x: 0, y: 0},\n            { x: 0, y: 50},\n            { x: 0, y: 100},\n            { x: 0, y: 150},\n            { x: 0, y: 200}\n  ], \"The rows are in the correct positions\");\n\n  for(i = 0; i < 5; i++) {\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i+1));\n  }\n\n  ok(view.$().is(\'.ember-list-view-list\'), \'has correct list related class\');\n\n  Ember.run(function() {\n    view.set(\'width\', 200);\n  });\n\n  ok(view.$().is(\'.ember-list-view-grid\'), \'has correct grid related class\');\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  equal(view.$(\'.ember-list-item-view\').length, 10, \"The correct number of rows were rendered\");\n  deepEqual(helper.itemPositions(view), [\n            { x:0,   y: 0   },\n            { x:100, y: 0   },\n            { x:0,   y: 50  },\n            { x:100, y: 50  },\n            { x:0 ,  y: 100 },\n            { x:100, y: 100 },\n            { x:0,   y: 150 },\n            { x:100, y: 150 },\n            { x:0,   y: 200 },\n            { x:100, y: 200 }], \"The rows are in the correct positions\");\n\n  for(i = 0; i < 10; i++) {\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i+1));\n  }\n});\n\ntest(\"elementWidth change with scroll\", function(){\n  var i,\n      positionSorted,\n      content = helper.generateContent(100),\n      height = 200,\n      width = 200,\n      rowHeight = 50,\n      elementWidth = 100,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      });\n\n  view = Ember.ListView.create({\n    content: content,\n    height: height,\n    width: width,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass,\n    elementWidth: elementWidth\n  });\n\n  appendView();\n\n  Ember.run(function(){\n    view.scrollTo(1000);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 10, \"after scroll 1000 - The correct number of rows were rendered\");\n  deepEqual(helper.itemPositions(view), [\n            { x:0,   y: 1000 },\n            { x:100, y: 1000 },\n            { x:0,   y: 1050 },\n            { x:100, y: 1050 },\n            { x:0 ,  y: 1100 },\n            { x:100, y: 1100 },\n            { x:0,   y: 1150 },\n            { x:100, y: 1150 },\n            { x:0,   y: 1200 },\n            { x:100, y: 1200 }], \"after scroll 1000 - The rows are in the correct positions\");\n\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n\n  for (i = 0; i < 10; i++) {\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i + 41));\n  }\n\n  Ember.run(function() {\n    view.set(\'width\', 100);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 5, \" after width 100 -The correct number of rows were rendered\");\n\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n\n  deepEqual(helper.itemPositions(view), [\n            { x:0,   y: 2000 },\n            { x:0,   y: 2050 },\n            { x:0 ,  y: 2100 },\n            { x:0,   y: 2150 },\n            { x:0,   y: 2200 }], \"after width 100 - The rows are in the correct positions\");\n\n  for(i = 0; i < 5; i++) {\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i + 41));\n  }\n\n  Ember.run(function() {\n    view.set(\'width\', 200);\n  });\n\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  equal(view.$(\'.ember-list-item-view\').length, 10, \"after width 200 - The correct number of rows were rendered\");\n  deepEqual(helper.itemPositions(view), [\n            { x:0,   y: 1000 },\n            { x:100, y: 1000 },\n            { x:0,   y: 1050 },\n            { x:100, y: 1050 },\n            { x:0 ,  y: 1100 },\n            { x:100, y: 1100 },\n            { x:0,   y: 1150 },\n            { x:100, y: 1150 },\n            { x:0,   y: 1200 },\n            { x:100, y: 1200 }], \"after width 200 - The rows are in the correct positions\");\n\n  for(i = 0; i < 10; i++) {\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i + 41));\n  }\n});\n\ntest(\"A property of an item can be changed\", function() {\n  var content = helper.generateContent(100),\n      height = 500,\n      rowHeight = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      });\n\n  view = Ember.ListView.create({\n    content: content,\n    height: height,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass\n  });\n\n  appendView();\n\n  //Change name\n  Ember.run(function() {\n    content.set(\'0.name\', \'First change\');\n  });\n\n  equal(view.$(\'.ember-list-item-view:eq(0)\').text(), \"First change\", \"The item\'s name has been updated\");\n\n  //Scroll down, change name, and scroll back up\n  Ember.run(function() {\n    view.scrollTo(600);\n  });\n\n  Ember.run(function() {\n    content.set(\'0.name\', \'Second change\');\n  });\n\n  Ember.run(function() {\n    view.scrollTo(0);\n  });\n\n  equal(view.$(\'.ember-list-item-view:eq(0)\').text(), \"Second change\", \"The item\'s name has been updated\");\n\n});\n\ntest(\"The list view is wrapped in an extra div to support JS-emulated scrolling\", function() {\n  view = Ember.ListView.create({\n    content: Ember.A(),\n    height: 100,\n    rowHeight: 50\n  });\n\n  appendView();\n  equal(view.$(\'.ember-list-container\').length, 1, \"expected a ember-list-container wrapper div\");\n  equal(view.$(\'.ember-list-container > .ember-list-item-view\').length, 0, \"expected ember-list-items inside the wrapper div\");\n});\n\ntest(\"When scrolled past the totalHeight, views should not be recycled in. This is to support overscroll\", function() {\n  view = Ember.ListView.create({\n    content: helper.generateContent(2),\n    height:100,\n    rowHeight: 50,\n    itemViewClass: Ember.ListItemView.extend({\n      template: Ember.Handlebars.compile(\"Name: {{name}}\")\n    })\n  });\n\n  appendView();\n\n  Ember.run(function(){\n    view.scrollTo(150);\n  });\n\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"after width 200 - The correct number of rows were rendered\");\n\n  deepEqual(helper.itemPositions(view), [\n            { x:0, y:  0 },\n            { x:0, y: 50 }] , \"went beyond scroll max via overscroll\");\n\n  equal(Ember.$(positionSorted[0]).text(), \"Name: Item \" + 1);\n  equal(Ember.$(positionSorted[1]).text(), \"Name: Item \" + 2);\n});\n\n\ntest(\"When list-view is unable to scroll, scrollTop should be zero\", function() {\n  view = Ember.ListView.create({\n    content: helper.generateContent(2),\n    height:400,\n    rowHeight: 100,\n    itemViewClass: Ember.ListItemView.extend({\n      template: Ember.Handlebars.compile(\"Name: {{name}}\")\n    })\n  });\n\n  appendView();\n\n  Ember.run(function(){\n    view.scrollTo(1);\n  });\n\n  equal(view.get(\'scrollTop\'), 0, \"Scrolltop should be zero\");\n\n});\n\n\ntest(\"Creating a ListView without height and rowHeight properties should throw an exception\", function() {\n  throws(function() {\n    view = Ember.ListView.create({\n      content: helper.generateContent(4)\n    });\n\n    appendView();\n  },\n  /A ListView must be created with a height and a rowHeight./, \"Throws exception.\");\n});\n\ntest(\"Creating a ListView without height and rowHeight properties should throw an exception\", function() {\n  throws(function() {\n    view = Ember.ListView.create({\n      content: helper.generateContent(4)\n    });\n\n    appendView();\n  },\n  /A ListView must be created with a height and a rowHeight./, \"Throws exception.\");\n});\n\ntest(\"should trigger scrollYChanged correctly\", function () {\n  var scrollYChanged = 0, reuseChildren = 0;\n\n  view = Ember.ListView.extend({\n    init: function () {\n      this.on(\'scrollYChanged\', function () {\n        scrollYChanged++;\n      });\n      this._super();\n    },\n    _reuseChildren: function () {\n      reuseChildren++;\n      this._super();\n    }\n  }).create({\n    content: helper.generateContent(10),\n    height: 100,\n    rowHeight: 50\n  });\n\n  appendView();\n\n  equal(scrollYChanged, 0, \'scrollYChanged should not fire on init\');\n\n  Ember.run(function () {\n    view.scrollTo(1);\n  });\n\n  equal(scrollYChanged, 1, \'scrollYChanged should fire after scroll\');\n\n  Ember.run(function () {\n    view.scrollTo(1);\n  });\n\n  equal(scrollYChanged, 1, \'scrollYChanged should not fire for same value\');\n});\n\ntest(\"should trigger reuseChildren correctly\", function () {\n  var scrollYChanged = 0, reuseChildren = 0;\n\n  view = Ember.ListView.extend({\n    _reuseChildren: function () {\n      reuseChildren++;\n      this._super();\n    }\n  }).create({\n    content: helper.generateContent(10),\n    height: 100,\n    rowHeight: 50\n  });\n\n  appendView();\n\n  equal(reuseChildren, 1, \'initialize the content\');\n\n  Ember.run(function () {\n    view.scrollTo(1);\n  });\n\n  equal(reuseChildren, 1, \'should not update the content\');\n\n  Ember.run(function () {\n    view.scrollTo(51);\n  });\n\n  equal(reuseChildren, 2, \'should update the content\');\n});\n\ntest(\"handle strange ratios between height/rowHeight\", function() {\n  view = Ember.ListView.create({\n    content: helper.generateContent(15),\n    height: 235,\n    rowHeight: 73,\n    itemViewClass: Ember.ListItemView.extend({\n      template: Ember.Handlebars.compile(\"Name: {{name}}\")\n    })\n  });\n\n  appendView();\n\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  equal(view.$(\'.ember-list-item-view\').length, 5);\n\n  deepEqual(helper.itemPositions(view), [\n    { x:0, y:   0 },\n    { x:0, y:  73 },\n    { x:0, y: 146 },\n    { x:0, y: 219 },\n    { x:0, y: 292 }\n  ] , \"went beyond scroll max via overscroll\");\n\n  var i;\n  for (i = 0; i < positionSorted.length; i++) {\n    equal(Ember.$(positionSorted[i]).text(), \"Name: Item \" + (i + 1));\n  }\n\n  Ember.run(view, \'scrollTo\', 1000);\n\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  equal(view.$(\'.ember-list-item-view\').length, 5);\n\n  // expected\n  // -----\n  // 0   |\n  // 1   |\n  // 2   |\n  // 3   |\n  // 4   | <--- not rendered\n  // 5   |\n  // 6   |\n  // 7   |\n  // 8   |\n  // 9   |\n  // ----\n  // 10  | <- buffer\n  // ----\n  // 11  | <-- partially visible\n  // 12  | <--- visible\n  // 13  |\n  // 14  |\n  // ----\n  deepEqual(helper.itemPositions(view), [\n    { x:0, y:  730 }, // <-- buffer\n    { x:0, y:  803 }, // <-- partially visible\n    { x:0, y:  876 }, // <-- in view\n    { x:0, y:  949 }, // <-- in view\n    { x:0, y: 1022 }  // <-- in view\n  ], \"went beyond scroll max via overscroll\");\n\n  equal(Ember.$(positionSorted[0]).text(), \"Name: Item 11\");\n  equal(Ember.$(positionSorted[1]).text(), \"Name: Item 12\");\n  equal(Ember.$(positionSorted[2]).text(), \"Name: Item 13\");\n  equal(Ember.$(positionSorted[3]).text(), \"Name: Item 14\");\n  equal(Ember.$(positionSorted[4]).text(), \"Name: Item 15\");\n});\n\ntest(\"handle bindable rowHeight\", function() {\n  view = Ember.ListView.create({\n    content: helper.generateContent(15),\n    height: 400,\n    rowHeight: 100,\n    itemViewClass: Ember.ListItemView.extend({\n      template: Ember.Handlebars.compile(\"Name: {{name}}\")\n    })\n  });\n\n  appendView();\n\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  equal(view.$(\'.ember-list-item-view\').length, 5);\n  equal(view.get(\'totalHeight\'), 1500);\n\n  // expected\n  // -----\n  // 0   |\n  // 1   |\n  // 2   |\n  // 3   |\n  // -----\n  // 4   | <--- buffer\n  // -----\n  // 5   |\n  // 6   |\n  // 7   |\n  // 8   |\n  // 9   |\n  // 10  |\n  // 11  |\n  // 12  |\n  // 13  |\n  // 14  |\n  // -----\n  //\n  deepEqual(helper.itemPositions(view), [\n    { x:0, y:   0 }, // <- visible\n    { x:0, y: 100 }, // <- visible\n    { x:0, y: 200 }, // <- visible\n    { x:0, y: 300 }, // <- visible\n    { x:0, y: 400 }  // <- buffer\n  ] , \"inDOM views are correctly positioned: before rowHeight change\");\n\n  equal(Ember.$(positionSorted[0]).text(), \"Name: Item 1\");\n  equal(Ember.$(positionSorted[1]).text(), \"Name: Item 2\");\n  equal(Ember.$(positionSorted[2]).text(), \"Name: Item 3\");\n  equal(Ember.$(positionSorted[3]).text(), \"Name: Item 4\");\n\n  Ember.run(view, \'set\', \'rowHeight\', 200);\n\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  equal(view.$(\'.ember-list-item-view\').length, 3);\n  equal(view.get(\'totalHeight\'), 3000);\n\n  // expected\n  // -----\n  // 0   |\n  // 1   |\n  // ----|\n  // 2   | <--- buffer\n  // ----|\n  // 3   |\n  // 4   |\n  // 5   |\n  // 6   |\n  // 7   |\n  // 8   |\n  // 9   |\n  // 10  |\n  // 11  |\n  // 12  |\n  // 13  |\n  // 14  |\n  // -----\n  deepEqual(helper.itemPositions(view), [\n    { x:0, y:    0 }, // <-- visible\n    { x:0, y:  200 }, // <-- visible\n    { x:0, y:  400 }, // <-- buffer\n  ], \"inDOM views are correctly positioned: after rowHeight change\");\n\n  equal(Ember.$(positionSorted[0]).text(), \"Name: Item 1\");\n  equal(Ember.$(positionSorted[1]).text(), \"Name: Item 2\");\n  equal(Ember.$(positionSorted[2]).text(), \"Name: Item 3\");\n});\n})();//@ sourceURL=list_view_test.js");

eval("(function() {var css, view, helper;\nhelper = window.helper;\n\nfunction appendView() {\n  Ember.run(function() {\n    view.appendTo(\'#qunit-fixture\');\n  });\n}\n\nmodule(\"Ember.ListView - Multi-height\", {\n  setup: function() {\n    css = Ember.$(\"<style>\" +\n            \".ember-list-view {\" +\n            \"  overflow: auto;\" +\n            \"  position: relative;\" +\n            \"}\" +\n            \".ember-list-item-view {\" +\n            \"  position: absolute;\" +\n            \"}\" +\n            \".is-selected {\" +\n            \"  background: red;\" +\n            \"}\" +\n            \"</style>\").appendTo(\'head\');\n  },\n  teardown: function() {\n    css.remove();\n\n    Ember.run(function() {\n      if (view) { view.destroy(); }\n    });\n\n    Ember.ENABLE_PROFILING = false;\n  }\n});\n\ntest(\"Correct height based on content\", function() {\n  var content = [\n    { id:  1, type: \"cat\",   height: 100, name: \"Andrew\" },\n    { id:  3, type: \"cat\",   height: 100, name: \"Bruce\" },\n    { id:  4, type: \"other\", height: 150, name: \"Xbar\" },\n    { id:  5, type: \"dog\",   height:  50, name: \"Caroline\" },\n    { id:  6, type: \"cat\",   height: 100, name: \"David\" },\n    { id:  7, type: \"other\", height: 150, name: \"Xbar\" },\n    { id:  8, type: \"other\", height: 150, name: \"Xbar\" },\n    { id:  9, type: \"dog\",   height:  50, name: \"Edward\" },\n    { id: 10, type: \"dog\",   height:  50, name: \"Francis\" },\n    { id: 11, type: \"dog\",   height:  50, name: \"George\" },\n    { id: 12, type: \"other\", height: 150, name: \"Xbar\" },\n    { id: 13, type: \"dog\",   height:  50, name: \"Harry\" },\n    { id: 14, type: \"cat\",   height: 100, name: \"Ingrid\" },\n    { id: 15, type: \"other\", height: 150, name: \"Xbar\" },\n    { id: 16, type: \"cat\",   height: 100, name: \"Jenn\" },\n    { id: 17, type: \"cat\",   height: 100, name: \"Kelly\" },\n    { id: 18, type: \"other\", height: 150, name: \"Xbar\" },\n    { id: 19, type: \"other\", height: 150, name: \"Xbar\" },\n    { id: 20, type: \"cat\",   height: 100, name: \"Larry\" },\n    { id: 21, type: \"other\", height: 150, name: \"Xbar\" },\n    { id: 22, type: \"cat\",   height: 100, name: \"Manny\" },\n    { id: 23, type: \"dog\",   height:  50, name: \"Nathan\" },\n    { id: 24, type: \"cat\",   height: 100, name: \"Ophelia\" },\n    { id: 25, type: \"dog\",   height:  50, name: \"Patrick\" },\n    { id: 26, type: \"other\", height: 150, name: \"Xbar\" },\n    { id: 27, type: \"other\", height: 150, name: \"Xbar\" },\n    { id: 28, type: \"other\", height: 150, name: \"Xbar\" },\n    { id: 29, type: \"other\", height: 150, name: \"Xbar\" },\n    { id: 30, type: \"other\", height: 150, name: \"Xbar\" },\n    { id: 31, type: \"cat\",   height: 100, name: \"Quincy\" },\n    { id: 32, type: \"dog\",   height:  50, name: \"Roger\" },\n  ];\n\n  view = Ember.ListView.create({\n    content: Em.A(content),\n    height: 300,\n    width: 500,\n    rowHeight: 100,\n    itemViews: {\n      cat: Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"Meow says {{name}} expected: cat === {{type}} {{id}}\")\n      }),\n      dog: Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"Woof says {{name}} expected: dog === {{type}} {{id}}\")\n      }),\n      other: Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"Potato says {{name}} expected: other === {{type}} {{id}}\")\n      })\n    },\n    itemViewForIndex: function(idx) {\n      return this.itemViews[Ember.A(this.get(\'content\')).objectAt(idx).type];\n    },\n    heightForIndex: function(idx) {\n      return Ember.get(Ember.A(this.get(\'content\')).objectAt(idx), \'height\');\n    }\n  });\n\n  appendView();\n\n  equal(view.get(\'totalHeight\'), 3350);\n\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  equal(view.$(\'.ember-list-item-view\').length, 4);\n\n  var i, contentIdx;\n\n  equal(Ember.$(positionSorted[0]).text(), \"Meow says Andrew expected: cat === cat 1\");\n  equal(Ember.$(positionSorted[1]).text(), \"Meow says Bruce expected: cat === cat 3\");\n  equal(Ember.$(positionSorted[2]).text(), \"Potato says Xbar expected: other === other 4\");\n  equal(Ember.$(positionSorted[3]).text(), \"Woof says Caroline expected: dog === dog 5\");\n\n  deepEqual(helper.itemPositions(view), [\n    { x:0, y:    0 }, // <-- in view\n    { x:0, y:  100 }, // <-- in view\n    { x:0, y:  200 }, // <-- in view\n    { x:0, y:  350 }  // <-- buffer\n  ], \'went beyond scroll max via overscroll\');\n\n  Ember.run(view, \'scrollTo\', 1000);\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n\n  equal(Ember.$(positionSorted[0]).text(), \"Potato says Xbar expected: other === other 12\");\n  equal(Ember.$(positionSorted[1]).text(), \"Woof says Harry expected: dog === dog 13\");\n  equal(Ember.$(positionSorted[2]).text(), \"Meow says Ingrid expected: cat === cat 14\");\n  equal(Ember.$(positionSorted[3]).text(), \"Potato says Xbar expected: other === other 15\");\n\n  deepEqual(helper.itemPositions(view), [\n    { x:0, y: 950 }, // <-- partially in view\n    { x:0, y: 1100 }, // <-- in view\n    { x:0, y: 1150 }, // <-- in view\n    { x:0, y: 1250 }  // <-- partially in view\n  ], \'went beyond scroll max via overscroll\');\n});\n\ntest(\"Correct height based on view\", function() {\n  var content = [\n    { id:  1, type: \"cat\",   name: \"Andrew\" },\n    { id:  3, type: \"cat\",   name: \"Bruce\" },\n    { id:  4, type: \"other\", name: \"Xbar\" },\n    { id:  5, type: \"dog\",   name: \"Caroline\" },\n    { id:  6, type: \"cat\",   name: \"David\" },\n    { id:  7, type: \"other\", name: \"Xbar\" },\n    { id:  8, type: \"other\", name: \"Xbar\" },\n    { id:  9, type: \"dog\",   name: \"Edward\" },\n    { id: 10, type: \"dog\",   name: \"Francis\" },\n    { id: 11, type: \"dog\",   name: \"George\" },\n    { id: 12, type: \"other\", name: \"Xbar\" },\n    { id: 13, type: \"dog\",   name: \"Harry\" },\n    { id: 14, type: \"cat\",   name: \"Ingrid\" },\n    { id: 15, type: \"other\", name: \"Xbar\" },\n    { id: 16, type: \"cat\",   name: \"Jenn\" },\n    { id: 17, type: \"cat\",   name: \"Kelly\" },\n    { id: 18, type: \"other\", name: \"Xbar\" },\n    { id: 19, type: \"other\", name: \"Xbar\" },\n    { id: 20, type: \"cat\",   name: \"Larry\" },\n    { id: 21, type: \"other\", name: \"Xbar\" },\n    { id: 22, type: \"cat\",   name: \"Manny\" },\n    { id: 23, type: \"dog\",   name: \"Nathan\" },\n    { id: 24, type: \"cat\",   name: \"Ophelia\" },\n    { id: 25, type: \"dog\",   name: \"Patrick\" },\n    { id: 26, type: \"other\", name: \"Xbar\" },\n    { id: 27, type: \"other\", name: \"Xbar\" },\n    { id: 28, type: \"other\", name: \"Xbar\" },\n    { id: 29, type: \"other\", name: \"Xbar\" },\n    { id: 30, type: \"other\", name: \"Xbar\" },\n    { id: 31, type: \"cat\",   name: \"Quincy\" },\n    { id: 32, type: \"dog\",   name: \"Roger\" },\n  ];\n\n  view = Ember.ListView.create({\n    content: Em.A(content),\n    height: 300,\n    width: 500,\n    rowHeight: 100,\n    itemViews: {\n      cat: Ember.ListItemView.extend({\n        rowHeight: 100,\n        template: Ember.Handlebars.compile(\"Meow says {{name}} expected: cat === {{type}} {{id}}\")\n      }),\n      dog: Ember.ListItemView.extend({\n        rowHeight: 50,\n        template: Ember.Handlebars.compile(\"Woof says {{name}} expected: dog === {{type}} {{id}}\")\n      }),\n      other: Ember.ListItemView.extend({\n        rowHeight: 150,\n        template: Ember.Handlebars.compile(\"Potato says {{name}} expected: other === {{type}} {{id}}\")\n      })\n    },\n    itemViewForIndex: function(idx){\n      return this.itemViews[Ember.get(Ember.A(this.get(\'content\')).objectAt(idx), \'type\')];\n    },\n    heightForIndex: function(idx) {\n      // proto() is a quick hack, lets just store this on the class..\n      return this.itemViewForIndex(idx).proto().rowHeight;\n    }\n  });\n\n  appendView();\n\n  equal(view.get(\'totalHeight\'), 3350);\n\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  equal(view.$(\'.ember-list-item-view\').length, 4);\n\n  var i, contentIdx;\n\n  equal(Ember.$(positionSorted[0]).text(), \"Meow says Andrew expected: cat === cat 1\");\n  equal(Ember.$(positionSorted[1]).text(), \"Meow says Bruce expected: cat === cat 3\");\n  equal(Ember.$(positionSorted[2]).text(), \"Potato says Xbar expected: other === other 4\");\n  equal(Ember.$(positionSorted[3]).text(), \"Woof says Caroline expected: dog === dog 5\");\n\n  deepEqual(helper.itemPositions(view), [\n    { x:0, y:    0 }, // <-- in view\n    { x:0, y:  100 }, // <-- in view\n    { x:0, y:  200 }, // <-- in view\n    { x:0, y:  350 }  // <-- buffer\n  ], \'went beyond scroll max via overscroll\');\n\n  Ember.run(view, \'scrollTo\', 1000);\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n\n  equal(Ember.$(positionSorted[0]).text(), \"Potato says Xbar expected: other === other 12\");\n  equal(Ember.$(positionSorted[1]).text(), \"Woof says Harry expected: dog === dog 13\");\n  equal(Ember.$(positionSorted[2]).text(), \"Meow says Ingrid expected: cat === cat 14\");\n  equal(Ember.$(positionSorted[3]).text(), \"Potato says Xbar expected: other === other 15\");\n\n  deepEqual(helper.itemPositions(view), [\n    { x:0, y:  950 }, // <-- partially in view\n    { x:0, y: 1100 }, // <-- in view\n    { x:0, y: 1150 }, // <-- in view\n    { x:0, y: 1250 }  // <-- partially in view\n  ], \'went beyond scroll max via overscroll\');\n});\n\n\n\n\ntest(\"_numChildViewsForViewport + _startingIndex with multi-height\", function() {\n  var content = [\n    { id:  1, type: \"cat\",   name: \"Andrew\" },\n    { id:  3, type: \"cat\",   name: \"Bruce\" },\n    { id:  4, type: \"other\", name: \"Xbar\" },\n    { id:  5, type: \"dog\",   name: \"Caroline\" },\n    { id:  6, type: \"cat\",   name: \"David\" },\n    { id:  7, type: \"other\", name: \"Xbar\" },\n    { id:  8, type: \"other\", name: \"Xbar\" },\n    { id:  9, type: \"dog\",   name: \"Edward\" },\n    { id: 10, type: \"dog\",   name: \"Francis\" },\n    { id: 11, type: \"dog\",   name: \"George\" },\n    { id: 12, type: \"other\", name: \"Xbar\" },\n    { id: 13, type: \"dog\",   name: \"Harry\" },\n    { id: 14, type: \"cat\",   name: \"Ingrid\" },\n    { id: 15, type: \"other\", name: \"Xbar\" },\n    { id: 16, type: \"cat\",   name: \"Jenn\" },\n    { id: 17, type: \"cat\",   name: \"Kelly\" },\n    { id: 18, type: \"other\", name: \"Xbar\" },\n    { id: 19, type: \"other\", name: \"Xbar\" },\n    { id: 20, type: \"cat\",   name: \"Larry\" },\n    { id: 21, type: \"other\", name: \"Xbar\" },\n    { id: 22, type: \"cat\",   name: \"Manny\" },\n    { id: 23, type: \"dog\",   name: \"Nathan\" },\n    { id: 24, type: \"cat\",   name: \"Ophelia\" },\n    { id: 25, type: \"dog\",   name: \"Patrick\" },\n    { id: 26, type: \"other\", name: \"Xbar\" },\n    { id: 27, type: \"other\", name: \"Xbar\" },\n    { id: 28, type: \"other\", name: \"Xbar\" },\n    { id: 29, type: \"other\", name: \"Xbar\" },\n    { id: 30, type: \"other\", name: \"Xbar\" },\n    { id: 31, type: \"cat\",   name: \"Quincy\" },\n    { id: 32, type: \"dog\",   name: \"Roger\" },\n  ];\n\n  view = Ember.ListView.create({\n    content: Em.A(content),\n    height: 300,\n    width: 500,\n    rowHeight: 100,\n    itemViews: {\n      cat: Ember.ListItemView.extend({\n        rowHeight: 100,\n        template: Ember.Handlebars.compile(\"Meow says {{name}} expected: cat === {{type}} {{id}}\")\n      }),\n      dog: Ember.ListItemView.extend({\n        rowHeight: 50,\n        template: Ember.Handlebars.compile(\"Woof says {{name}} expected: dog === {{type}} {{id}}\")\n      }),\n      other: Ember.ListItemView.extend({\n        rowHeight: 150,\n        template: Ember.Handlebars.compile(\"Potato says {{name}} expected: other === {{type}} {{id}}\")\n      })\n    },\n    itemViewForIndex: function(idx){\n      return this.itemViews[Ember.get(Ember.A(this.get(\'content\')).objectAt(idx), \'type\')];\n    },\n    heightForIndex: function(idx) {\n      // proto() is a quick hack, lets just store this on the class..\n      return this.itemViewForIndex(idx).proto().rowHeight;\n    }\n  });\n\n  appendView();\n\n  equal(view._numChildViewsForViewport(), 4, \'expected _numChildViewsForViewport to be correct (before scroll)\');\n  equal(view._startingIndex(), 0, \'expected _startingIndex to be correct (before scroll)\');\n\n  // entries: 1, 3, 4, 5\n\n  Ember.run(view, \'scrollTo\', 1000);\n\n  // entries: 12, 13, 14, 15\n\n  equal(view._numChildViewsForViewport(), 5, \'expected _numChildViewsForViewport to be correct (after scroll)\');\n  equal(view._startingIndex(), 10, \'expected _startingIndex to be correct (after scroll)\');\n});\n\n\ntest(\"_cachedHeights is unique per instance\", function() {\n  var content = [ ];\n\n  var ParentClass = Ember.ListView.extend({\n    content: Em.A(content),\n    height: 300,\n    width: 500,\n    rowHeight: 100,\n    itemViews: {\n      other: Ember.ListItemView.extend({\n        rowHeight: 150,\n        template: Ember.Handlebars.compile(\"Potato says {{name}} expected: other === {{type}} {{id}}\")\n      })\n    },\n    itemViewForIndex: function(idx){\n      return this.itemViews[Ember.get(Ember.A(this.get(\'content\')).objectAt(idx), \'type\')];\n    },\n    heightForIndex: function(idx) {\n      // proto() is a quick hack, lets just store this on the class..\n      return this.itemViewForIndex(idx).proto().rowHeight;\n    }\n  });\n\n  var viewA = ParentClass.create();\n  var viewB = ParentClass.create();\n\n  deepEqual(viewA._cachedHeights, viewB._cachedHeights);\n\n  viewA._cachedHeights.push(1);\n\n  equal(viewA._cachedHeights.length, 2);\n  equal(viewB._cachedHeights.length, 1, \'expected no addition cached heights, cache should not be shared between instances\');\n});\n\ntest(\"handle bindable rowHeight with multi-height (only fallback case)\", function() {\n  var content = [\n    { id:  1, type: \"cat\",   name: \"Andrew\" },\n    { id:  3, type: \"cat\",   name: \"Bruce\" },\n    { id:  4, type: \"other\", name: \"Xbar\" },\n    { id:  5, type: \"dog\",   name: \"Caroline\" },\n    { id:  6, type: \"cat\",   name: \"David\" },\n    { id:  7, type: \"other\", name: \"Xbar\" },\n    { id:  8, type: \"other\", name: \"Xbar\" },\n    { id:  9, type: \"dog\",   name: \"Edward\" },\n    { id: 10, type: \"dog\",   name: \"Francis\" },\n    { id: 11, type: \"dog\",   name: \"George\" },\n    { id: 12, type: \"other\", name: \"Xbar\" },\n    { id: 13, type: \"dog\",   name: \"Harry\" },\n    { id: 14, type: \"cat\",   name: \"Ingrid\" },\n    { id: 15, type: \"other\", name: \"Xbar\" },\n    { id: 16, type: \"cat\",   name: \"Jenn\" },\n    { id: 17, type: \"cat\",   name: \"Kelly\" },\n    { id: 18, type: \"other\", name: \"Xbar\" },\n    { id: 19, type: \"other\", name: \"Xbar\" },\n    { id: 20, type: \"cat\",   name: \"Larry\" },\n    { id: 21, type: \"other\", name: \"Xbar\" },\n    { id: 22, type: \"cat\",   name: \"Manny\" },\n    { id: 23, type: \"dog\",   name: \"Nathan\" },\n    { id: 24, type: \"cat\",   name: \"Ophelia\" },\n    { id: 25, type: \"dog\",   name: \"Patrick\" },\n    { id: 26, type: \"other\", name: \"Xbar\" },\n    { id: 27, type: \"other\", name: \"Xbar\" },\n    { id: 28, type: \"other\", name: \"Xbar\" },\n    { id: 29, type: \"other\", name: \"Xbar\" },\n    { id: 30, type: \"other\", name: \"Xbar\" },\n    { id: 31, type: \"cat\",   name: \"Quincy\" },\n    { id: 32, type: \"dog\",   name: \"Roger\" }\n  ];\n\n  view = Ember.ListView.create({\n    content: Em.A(content),\n    height: 300,\n    width: 500,\n    rowHeight: 100,\n    itemViews: {\n      other: Ember.ListItemView.extend({\n        rowHeight: 150,\n        template: Ember.Handlebars.compile(\"Potato says {{name}} expected: other === {{type}} {{id}}\")\n      })\n    },\n    itemViewForIndex: function(idx){\n      return this.itemViews[Ember.get(Ember.A(this.get(\'content\')).objectAt(idx), \'type\')] || Ember.ReusableListItemView;\n    },\n\n    heightForIndex: function(idx) {\n      var view = this.itemViewForIndex(idx);\n\n     return view.proto().rowHeight || this.get(\'rowHeight\');\n    }\n  });\n\n  appendView();\n\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  equal(view.$(\'.ember-list-item-view\').length, 4);\n  equal(view.get(\'totalHeight\'), 3750);\n\n  // expected\n  // -----\n  // 0   |\n  // 1   |\n  // 2   |\n  // -----\n  // 3   | <--- buffer\n  // -----\n  // 4   |\n  // 5   |\n  // 6   |\n  // 7   |\n  // 8   |\n  // 9   |\n  // 10  |\n  // 11  |\n  // 12  |\n  // 13  |\n  // 14  |\n  // -----\n  //\n  deepEqual(helper.itemPositions(view), [\n    { x:0, y:   0 }, // <- visible\n    { x:0, y: 100 }, // <- visible\n    { x:0, y: 200 }, // <- visible\n    { x:0, y: 350 }, // <- buffer\n  ] , \"inDOM views are correctly positioned: before rowHeight change\");\n\n  Ember.run(view, \'set\', \'rowHeight\', 200);\n\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  equal(view.$(\'.ember-list-item-view\').length, 3);\n  equal(view.get(\'totalHeight\'), 5550);\n\n  // expected\n  // -----\n  // 0   |\n  // 1   |\n  // ----|\n  // 2   | <--- buffer\n  // ----|\n  // 3   |\n  // 4   |\n  // 5   |\n  // 6   |\n  // 7   |\n  // 8   |\n  // 9   |\n  // 10  |\n  // 11  |\n  // 12  |\n  // 13  |\n  // 14  |\n  // -----\n  deepEqual(helper.itemPositions(view), [\n    { x:0, y:    0 }, // <-- visible\n    { x:0, y:  200 }, // <-- visible\n    { x:0, y:  400 }, // <-- buffer\n  ], \"inDOM views are correctly positioned: after rowHeight change\");\n});\n})();//@ sourceURL=multi_height_list_view_test.js");

eval("(function() {var css, view, helper;\nhelper = window.helper;\n\nfunction appendView() {\n  Ember.run(function() {\n    view.appendTo(\'#qunit-fixture\');\n  });\n}\n\nmodule(\"Ember.ListView - Multi-height\", {\n  setup: function() {\n    css = Ember.$(\"<style>\" +\n            \".ember-list-view {\" +\n            \"  overflow: auto;\" +\n            \"  position: relative;\" +\n            \"}\" +\n            \".ember-list-item-view {\" +\n            \"  position: absolute;\" +\n            \"}\" +\n            \".is-selected {\" +\n            \"  background: red;\" +\n            \"}\" +\n            \"</style>\").appendTo(\'head\');\n  },\n  teardown: function() {\n    css.remove();\n\n    Ember.run(function() {\n      if (view) { view.destroy(); }\n    });\n\n    Ember.ENABLE_PROFILING = false;\n  }\n});\n\ntest(\"Correct view is used for right data type\", function() {\n  var content = [\n    { id:  1, type: \"cat\",   name: \"Andrew\" },\n    { id:  3, type: \"cat\",   name: \"Bruce\" },\n    { id:  4, type: \"other\", name: \"Xbar\" },\n    { id:  5, type: \"dog\",   name: \"Caroline\" },\n    { id:  6, type: \"cat\",   name: \"David\" },\n    { id:  7, type: \"other\", name: \"Xbar\" },\n    { id:  8, type: \"other\", name: \"Xbar\" },\n    { id:  9, type: \"dog\",   name: \"Edward\" },\n    { id: 10, type: \"dog\",   name: \"Francis\" },\n    { id: 11, type: \"dog\",   name: \"George\" },\n    { id: 12, type: \"other\", name: \"Xbar\" },\n    { id: 13, type: \"dog\",   name: \"Harry\" },\n    { id: 14, type: \"cat\",   name: \"Ingrid\" },\n    { id: 15, type: \"other\", name: \"Xbar\" },\n    { id: 16, type: \"cat\",   name: \"Jenn\" },\n    { id: 17, type: \"cat\",   name: \"Kelly\" },\n    { id: 18, type: \"other\", name: \"Xbar\" },\n    { id: 19, type: \"other\", name: \"Xbar\" },\n    { id: 20, type: \"cat\",   name: \"Larry\" },\n    { id: 21, type: \"other\", name: \"Xbar\" },\n    { id: 22, type: \"cat\",   name: \"Manny\" },\n    { id: 23, type: \"dog\",   name: \"Nathan\" },\n    { id: 24, type: \"cat\",   name: \"Ophelia\" },\n    { id: 25, type: \"dog\",   name: \"Patrick\" },\n    { id: 26, type: \"other\", name: \"Xbar\" },\n    { id: 27, type: \"other\", name: \"Xbar\" },\n    { id: 28, type: \"other\", name: \"Xbar\" },\n    { id: 29, type: \"other\", name: \"Xbar\" },\n    { id: 30, type: \"other\", name: \"Xbar\" },\n    { id: 31, type: \"cat\",   name: \"Quincy\" },\n    { id: 32, type: \"dog\",   name: \"Roger\" },\n  ];\n\n  view = Ember.ListView.create({\n    content: Em.A(content),\n    height: 300,\n    width: 500,\n    rowHeight: 100,\n    itemViews: {\n      cat: Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"Meow says {{name}} expected: cat === {{type}} {{id}}\")\n      }),\n      dog: Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"Woof says {{name}} expected: dog === {{type}} {{id}}\")\n      }),\n      other: Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"Potato says {{name}} expected: other === {{type}} {{id}}\")\n      })\n    },\n    itemViewForIndex: function(idx){\n      return this.itemViews[this.get(\'content\').objectAt(idx).type];\n    }\n  });\n\n  appendView();\n\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  equal(view.$(\'.ember-list-item-view\').length, 4);\n\n  var i, contentIdx;\n\n  equal(Ember.$(positionSorted[0]).text(), \"Meow says Andrew expected: cat === cat 1\");\n  equal(Ember.$(positionSorted[1]).text(), \"Meow says Bruce expected: cat === cat 3\");\n  equal(Ember.$(positionSorted[2]).text(), \"Potato says Xbar expected: other === other 4\");\n  equal(Ember.$(positionSorted[3]).text(), \"Woof says Caroline expected: dog === dog 5\");\n\n  deepEqual(helper.itemPositions(view), [\n    { x: 0, y:    0 }, // <-- in view\n    { x: 0, y:  100 }, // <-- in view\n    { x: 0, y:  200 }, // <-- in view\n    { x: 0, y:  300 }  // <-- buffer\n  ], \'went beyond scroll max via overscroll\');\n\n  Ember.run(view, \'scrollTo\', 1000);\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n\n  equal(Ember.$(positionSorted[0]).text(), \"Potato says Xbar expected: other === other 12\");\n  equal(Ember.$(positionSorted[1]).text(), \"Woof says Harry expected: dog === dog 13\");\n  equal(Ember.$(positionSorted[2]).text(), \"Meow says Ingrid expected: cat === cat 14\");\n  equal(Ember.$(positionSorted[3]).text(), \"Potato says Xbar expected: other === other 15\");\n\n  deepEqual(helper.itemPositions(view), [\n    { x:0, y: 1000 }, // <-- partially in view\n    { x:0, y: 1100 }, // <-- in view\n    { x:0, y: 1200 }, // <-- in view\n    { x:0, y: 1300 }  // <-- partially in view\n  ], \'went beyond scroll max via overscroll\');\n});\n})();//@ sourceURL=multi_view_list_view_test.js");

eval("(function() {var view, helper;\nhelper = window.helper;\n\nfunction appendView() {\n  Ember.run(function() {\n    view.appendTo(\'#qunit-fixture\');\n  });\n}\n\nmodule(\"Ember.ListView unit: - numOfChildViewsForViewport\", {\n  teardown: function() {\n    Ember.run(function() {\n      if (view) { view.destroy(); }\n    });\n  }\n});\n\ntest(\"computing the number of child views to create with scrollTop zero\", function() {\n  view = Ember.ListView.create({\n    height: 500,\n    rowHeight: 50,\n    content: Ember.A()\n  });\n\n  equal(view._numChildViewsForViewport(), 11);\n});\n\ntest(\"computing the number of child views to create after when scroll down a bit\", function() {\n  view = Ember.ListView.create({\n    height: 500,\n    rowHeight: 50,\n    scrollTop: 51,\n    content: Ember.A()\n  });\n  equal(view._numChildViewsForViewport(), 11);\n});\n\n})();//@ sourceURL=num_of_child_views_for_viewport_test.js");

eval("(function() {var css, view, helper;\nhelper = window.helper;\nfunction appendView() {\n  Ember.run(function() {\n    view.appendTo(\'#qunit-fixture\');\n  });\n}\n\nmodule(\"Ember.ListView acceptance - View recycling\", {\n  setup: function() {\n    css = Ember.$(\"<style>\" +\n            \".ember-list-view {\" +\n            \"  overflow: auto;\" +\n            \"  position: relative;\" +\n            \"}\" +\n            \".ember-list-item-view {\" +\n            \"  position: absolute;\" +\n            \"}\" +\n            \".is-selected {\" +\n            \"  background: red;\" +\n            \"}\" +\n            \"</style>\").appendTo(\'head\');\n  },\n  teardown: function() {\n    css.remove();\n\n    Ember.run(function() {\n      if (view) { view.destroy(); }\n    });\n  }\n});\n\ntest(\"recycling complex views long list\", function(){\n  var content = helper.generateContent(100),\n      height = 50,\n      rowHeight = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        innerViewClass: Ember.View.extend({\n          didInsertElement: function(){\n            innerViewInsertionCount++;\n          },\n          willDestroyElement: function(){\n            innerViewDestroyCount++;\n          }\n        }),\n        template: Ember.Handlebars.compile(\"{{name}} {{#view view.innerViewClass}}{{/view}}\")\n      });\n\n  var listViewInsertionCount, listViewDestroyCount,\n  innerViewInsertionCount, innerViewDestroyCount;\n\n  listViewInsertionCount = 0;\n  listViewDestroyCount = 0;\n\n  innerViewInsertionCount = 0;\n  innerViewDestroyCount = 0;\n\n  view = Ember.ListView.create({\n    content: content,\n    height: height,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass,\n    scrollTop: 0,\n    didInsertElement: function() {\n      listViewInsertionCount++;\n    },\n    willDestroyElement: function() {\n      listViewDestroyCount++;\n    }\n  });\n\n  equal(listViewInsertionCount, 0, \"expected number of listView\'s didInsertElement\");\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement\");\n\n  appendView();\n\n  equal(listViewInsertionCount, 1, \"expected number of listView\'s didInsertElement\");\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement\");\n\n  equal(innerViewInsertionCount, 2, \"expected number of innerView\'s didInsertElement\");\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s didInsertElement\");\n\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered\");\n\n  innerViewInsertionCount = 0;\n  innerViewDestroyCount = 0;\n\n  Ember.run(function() {\n    view.scrollTo(50);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered\");\n\n  equal(innerViewInsertionCount, 1, \"expected number of innerView\'s didInsertElement\");\n  equal(innerViewDestroyCount, 1, \"expected number of innerView\'s willDestroyElement\");\n\n  equal(listViewInsertionCount, 1, \"expected number of listView\'s didInsertElement\");\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement\");\n\n  innerViewInsertionCount = 0;\n  innerViewDestroyCount = 0;\n\n  Ember.run(function() {\n    view.scrollTo(0);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered\");\n\n  equal(innerViewInsertionCount, 1, \"expected number of innerView\'s didInsertElement\");\n  equal(innerViewDestroyCount, 1, \"expected number of innerView\'s willDestroyElement\");\n\n  equal(listViewInsertionCount, 1, \"expected number of listView\'s didInsertElement\");\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement\");\n\n});\n\ntest(\"recycling complex views short list\", function(){\n  var content = helper.generateContent(2),\n      height = 50,\n      rowHeight = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        innerViewClass: Ember.View.extend({\n          didInsertElement: function(){\n            innerViewInsertionCount++;\n          },\n          willDestroyElement: function(){\n            innerViewDestroyCount++;\n          }\n        }),\n        template: Ember.Handlebars.compile(\"{{name}} {{#view view.innerViewClass}}{{/view}}\")\n      });\n\n  var listViewInsertionCount, listViewDestroyCount,\n  innerViewInsertionCount, innerViewDestroyCount;\n\n  listViewInsertionCount = 0;\n  listViewDestroyCount = 0;\n\n  innerViewInsertionCount = 0;\n  innerViewDestroyCount = 0;\n\n  view = Ember.ListView.create({\n    content: content,\n    height: height,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass,\n    scrollTop: 0,\n    didInsertElement: function() {\n      listViewInsertionCount++;\n    },\n    willDestroyElement: function() {\n      listViewDestroyCount++;\n    }\n  });\n\n  equal(listViewInsertionCount, 0, \"expected number of listView\'s didInsertElement (pre-append)\");\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement (pre-append)\");\n\n  appendView();\n\n  equal(listViewInsertionCount, 1, \"expected number of listView\'s didInsertElement (post-append)\");\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement (post-append)\");\n\n  equal(innerViewInsertionCount, 2, \"expected number of innerView\'s didInsertElement (post-append)\");\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s didInsertElement (post-append)\");\n\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered\");\n\n  innerViewInsertionCount = 0;\n  innerViewDestroyCount = 0;\n\n  Ember.run(function() {\n    view.scrollTo(50);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered (post-scroll to 50)\");\n\n  equal(innerViewInsertionCount, 0, \"expected number of innerView\'s didInsertElement (post-scroll to 50)\");\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s willDestroyElement (post-scroll to 50)\");\n\n  equal(listViewInsertionCount, 1, \"expected number of listView\'s didInsertElement (post-scroll to 50)\");\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement (post-scroll to 50)\");\n\n  innerViewInsertionCount = 0;\n  innerViewDestroyCount = 0;\n\n  Ember.run(function() {\n    view.scrollTo(0);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered (post-scroll to 0)\");\n\n  equal(innerViewInsertionCount, 0, \"expected number of innerView\'s didInsertElement (post-scroll to 0)\");\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s willDestroyElement (post-scroll to 0)\");\n\n  equal(listViewInsertionCount, 1, \"expected number of listView\'s didInsertElement (post-scroll to 0)\");\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement (post-scroll to 0)\");\n\n});\n\ntest(\"recycling complex views long list, with ReusableListItemView\", function(){\n  var content = helper.generateContent(50),\n      height = 50,\n      rowHeight = 50,\n      itemViewClass = Ember.ReusableListItemView.extend({\n        innerViewClass: Ember.View.extend({\n          didInsertElement: function(){\n            innerViewInsertionCount++;\n          },\n          willDestroyElement: function(){\n            innerViewDestroyCount++;\n          }\n        }),\n        didInsertElement: function(){\n          this._super();\n          listItemViewInsertionCount++;\n        },\n        willDestroyElement: function(){\n          this._super();\n          listItemViewDestroyCount++;\n        },\n        template: Ember.Handlebars.compile(\"{{name}} {{#view view.innerViewClass}}{{/view}}\")\n      });\n\n  var listViewInsertionCount, listViewDestroyCount,\n  listItemViewInsertionCount, listItemViewDestroyCount,\n  innerViewInsertionCount, innerViewDestroyCount;\n\n  listViewInsertionCount = 0;\n  listViewDestroyCount = 0;\n\n  listItemViewInsertionCount = 0;\n  listItemViewDestroyCount = 0;\n\n  innerViewInsertionCount = 0;\n  innerViewDestroyCount = 0;\n\n  view = Ember.ListView.create({\n    content: content,\n    height: height,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass,\n    scrollTop: 0,\n    didInsertElement: function() {\n      listViewInsertionCount++;\n    },\n    willDestroyElement: function() {\n      listViewDestroyCount++;\n    }\n  });\n\n  equal(listViewInsertionCount, 0, \"expected number of listView\'s didInsertElement (pre-append)\");\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement (pre-append)\");\n  equal(listItemViewInsertionCount, 0, \"expected number of listItemView\'s didInsertElement (pre-append)\");\n  equal(listItemViewDestroyCount, 0, \"expected number of listItemView\'s willDestroyElement (pre-append)\");\n  equal(innerViewInsertionCount, 0, \"expected number of innerView\'s didInsertElement (pre-append)\");\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s willDestroyElement (pre-append)\");\n\n  appendView();\n\n  equal(listViewInsertionCount, 1, \"expected number of listView\'s didInsertElement (post-append)\");\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement (post-append)\");\n\n  equal(listItemViewInsertionCount, 2, \"expected number of listItemView\'s didInsertElement (post-append)\");\n  equal(listItemViewDestroyCount, 0, \"expected number of listItemView\'s didInsertElement (post-append)\");\n\n  equal(innerViewInsertionCount, 2, \"expected number of innerView\'s didInsertElement (post-append)\");\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s didInsertElement (post-append)\");\n\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered\");\n\n  listItemViewInsertionCount = 0;\n  listItemViewDestroyCount = 0;\n  innerViewInsertionCount = 0;\n  innerViewDestroyCount = 0;\n\n  Ember.run(function() {\n    view.scrollTo(50);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered (post-scroll to 50)\");\n\n  equal(listItemViewInsertionCount, 0, \"expected number of listItemView\'s didInsertElement (post-scroll to 50)\");\n  equal(listItemViewDestroyCount, 0, \"expected number of listItemView\'s willDestroyElement (post-scroll to 50)\");\n  equal(innerViewInsertionCount, 0, \"expected number of innerView\'s didInsertElement (post-scroll to 50)\");\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s willDestroyElement (post-scroll to 50)\");\n\n  listItemViewInsertionCount = 0;\n  listItemViewDestroyCount = 0;\n  innerViewInsertionCount = 0;\n  innerViewDestroyCount = 0;\n\n  Ember.run(function() {\n    view.scrollTo(0);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered (post-scroll to 0)\");\n\n  equal(listItemViewInsertionCount, 0, \"expected number of listItemView\'s didInsertElement (post-scroll to 0)\");\n  equal(listItemViewDestroyCount, 0, \"expected number of listItemView\'s willDestroyElement (post-scroll to 0)\");\n  equal(innerViewInsertionCount, 0, \"expected number of innerView\'s didInsertElement (post-scroll to 0)\");\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s willDestroyElement (post-scroll to 0)\");\n});\n\ntest(\"recycling complex views short list, with ReusableListItemView\", function(){\n  var content = helper.generateContent(2),\n      height = 50,\n      rowHeight = 50,\n      itemViewClass = Ember.ReusableListItemView.extend({\n        innerViewClass: Ember.View.extend({\n          didInsertElement: function(){\n            innerViewInsertionCount++;\n          },\n          willDestroyElement: function(){\n            innerViewDestroyCount++;\n          }\n        }),\n        didInsertElement: function(){\n          this._super();\n          listItemViewInsertionCount++;\n        },\n        willDestroyElement: function(){\n          this._super();\n          listItemViewDestroyCount++;\n        },\n        template: Ember.Handlebars.compile(\"{{name}} {{#view view.innerViewClass}}{{/view}}\")\n      });\n\n  var listViewInsertionCount, listViewDestroyCount,\n  listItemViewInsertionCount, listItemViewDestroyCount,\n  innerViewInsertionCount, innerViewDestroyCount;\n\n  listViewInsertionCount = 0;\n  listViewDestroyCount = 0;\n\n  listItemViewInsertionCount = 0;\n  listItemViewDestroyCount = 0;\n\n  innerViewInsertionCount = 0;\n  innerViewDestroyCount = 0;\n\n  view = Ember.ListView.create({\n    content: content,\n    height: height,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass,\n    scrollTop: 0,\n    didInsertElement: function() {\n      listViewInsertionCount++;\n    },\n    willDestroyElement: function() {\n      listViewDestroyCount++;\n    }\n  });\n\n  equal(listViewInsertionCount, 0, \"expected number of listView\'s didInsertElement (pre-append)\");\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement (pre-append)\");\n  equal(listItemViewInsertionCount, 0, \"expected number of listItemView\'s didInsertElement (pre-append)\");\n  equal(listItemViewDestroyCount, 0, \"expected number of listItemView\'s willDestroyElement (pre-append)\");\n  equal(innerViewInsertionCount, 0, \"expected number of innerView\'s didInsertElement (pre-append)\");\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s willDestroyElement (pre-append)\");\n\n  appendView();\n\n  equal(listViewInsertionCount, 1, \"expected number of listView\'s didInsertElement (post-append)\");\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement (post-append)\");\n\n  equal(listItemViewInsertionCount, 2, \"expected number of listItemView\'s didInsertElement (post-append)\");\n  equal(listItemViewDestroyCount, 0, \"expected number of listItemView\'s didInsertElement (post-append)\");\n\n  equal(innerViewInsertionCount, 2, \"expected number of innerView\'s didInsertElement (post-append)\");\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s didInsertElement (post-append)\");\n\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered\");\n\n  listItemViewInsertionCount = 0;\n  listItemViewDestroyCount = 0;\n  innerViewInsertionCount = 0;\n  innerViewDestroyCount = 0;\n\n  Ember.run(function() {\n    view.scrollTo(50);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered (post-scroll to 50)\");\n\n  equal(listItemViewInsertionCount, 0, \"expected number of listItemView\'s didInsertElement (post-scroll to 50)\");\n  equal(listItemViewDestroyCount, 0, \"expected number of listItemView\'s willDestroyElement (post-scroll to 50)\");\n  equal(innerViewInsertionCount, 0, \"expected number of innerView\'s didInsertElement (post-scroll to 50)\");\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s willDestroyElement (post-scroll to 50)\");\n\n  listItemViewInsertionCount = 0;\n  listItemViewDestroyCount = 0;\n  innerViewInsertionCount = 0;\n  innerViewDestroyCount = 0;\n\n  Ember.run(function() {\n    view.scrollTo(0);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered (post-scroll to 0)\");\n\n  equal(listItemViewInsertionCount, 0, \"expected number of listItemView\'s didInsertElement (post-scroll to 0)\");\n  equal(listItemViewDestroyCount, 0, \"expected number of listItemView\'s willDestroyElement (post-scroll to 0)\");\n  equal(innerViewInsertionCount, 0, \"expected number of innerView\'s didInsertElement (post-scroll to 0)\");\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s willDestroyElement (post-scroll to 0)\");\n});\n\ntest(\"recycling complex views with ReusableListItemView, handling empty slots at the end of the grid\", function(){\n  var content = helper.generateContent(20),\n      height = 150,\n      rowHeight = 50,\n      width = 100,\n      elementWidth = 50,\n      itemViewClass = Ember.ReusableListItemView.extend({\n        innerViewClass: Ember.View.extend({\n          didInsertElement: function(){\n            innerViewInsertionCount++;\n          },\n          willDestroyElement: function(){\n            innerViewDestroyCount++;\n          }\n        }),\n        didInsertElement: function(){\n          this._super();\n          listItemViewInsertionCount++;\n        },\n        willDestroyElement: function(){\n          this._super();\n          listItemViewDestroyCount++;\n        },\n        template: Ember.Handlebars.compile(\"{{name}} {{#view view.innerViewClass}}{{/view}}\")\n      });\n\n  var listViewInsertionCount, listViewDestroyCount,\n  listItemViewInsertionCount, listItemViewDestroyCount,\n  innerViewInsertionCount, innerViewDestroyCount;\n\n  listViewInsertionCount = 0;\n  listViewDestroyCount = 0;\n\n  listItemViewInsertionCount = 0;\n  listItemViewDestroyCount = 0;\n\n  innerViewInsertionCount = 0;\n  innerViewDestroyCount = 0;\n\n  view = Ember.ListView.create({\n    content: content,\n    height: height,\n    rowHeight: rowHeight,\n    width: width,\n    elementWidth: elementWidth,\n    itemViewClass: itemViewClass,\n    scrollTop: 0,\n    didInsertElement: function() {\n      listViewInsertionCount++;\n    },\n    willDestroyElement: function() {\n      listViewDestroyCount++;\n    }\n  });\n\n  equal(listViewInsertionCount, 0, \"expected number of listView\'s didInsertElement (pre-append)\");\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement (pre-append)\");\n  equal(listItemViewInsertionCount, 0, \"expected number of listItemView\'s didInsertElement (pre-append)\");\n  equal(listItemViewDestroyCount, 0, \"expected number of listItemView\'s willDestroyElement (pre-append)\");\n  equal(innerViewInsertionCount, 0, \"expected number of innerView\'s didInsertElement (pre-append)\");\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s willDestroyElement (pre-append)\");\n\n  appendView();\n\n  equal(listViewInsertionCount, 1, \"expected number of listView\'s didInsertElement (post-append)\");\n  equal(listViewDestroyCount, 0, \"expected number of listView\'s willDestroyElement (post-append)\");\n\n  equal(listItemViewInsertionCount, 8, \"expected number of listItemView\'s didInsertElement (post-append)\");\n  equal(listItemViewDestroyCount, 0, \"expected number of listItemView\'s didInsertElement (post-append)\");\n\n  equal(innerViewInsertionCount, 8, \"expected number of innerView\'s didInsertElement (post-append)\");\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s didInsertElement (post-append)\");\n\n  equal(view.$(\'.ember-list-item-view\').length, 8, \"The correct number of items were rendered (post-append)\");\n  equal(view.$(\'.ember-list-item-view:visible\').length, 8, \"The number of items that are not hidden with display:none (post-append)\");\n\n  listItemViewInsertionCount = 0;\n  listItemViewDestroyCount = 0;\n  innerViewInsertionCount = 0;\n  innerViewDestroyCount = 0;\n\n  Ember.run(function() {\n    view.scrollTo(350);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 8, \"The correct number of items were rendered (post-scroll to 350)\");\n  equal(view.$(\'.ember-list-item-view:visible\').length, 8, \"The number of items that are not hidden with display:none (post-scroll to 350)\");\n\n  equal(listItemViewInsertionCount, 0, \"expected number of listItemView\'s didInsertElement (post-scroll to 350)\");\n  equal(listItemViewDestroyCount, 0, \"expected number of listItemView\'s willDestroyElement (post-scroll to 350)\");\n  equal(innerViewInsertionCount, 0, \"expected number of innerView\'s didInsertElement (post-scroll to 350)\");\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s willDestroyElement (post-scroll to 350)\");\n\n  listItemViewInsertionCount = 0;\n  listItemViewDestroyCount = 0;\n  innerViewInsertionCount = 0;\n  innerViewDestroyCount = 0;\n\n  Ember.run(function() {\n    view.set(\'width\', 150);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 12, \"The correct number of items were rendered (post-expand to 3 columns)\");\n\n  equal(listItemViewInsertionCount, 4, \"expected number of listItemView\'s didInsertElement (post-expand to 3 columns)\");\n  equal(listItemViewDestroyCount, 0, \"expected number of listItemView\'s willDestroyElement (post-expand to 3 columns)\");\n  equal(innerViewInsertionCount, 4, \"expected number of innerView\'s didInsertElement (post-expand to 3 columns)\");\n  equal(innerViewDestroyCount, 0, \"expected number of innerView\'s willDestroyElement (post-expand to 3 columns)\");\n\n  equal(view.$(\'.ember-list-item-view:visible\').length, 12, \"The number of items that are not hidden with display:none (post-expand to 3 columns)\");\n});\n})();//@ sourceURL=recycling_tests.js");

eval("(function() {var view, helper;\nhelper = window.helper;\n\nfunction appendView() {\n  Ember.run(function() {\n    view.appendTo(\'#qunit-fixture\');\n  });\n}\n\nmodule(\"Ember.ListView unit: - scrollTop\", {\n  teardown: function() {\n    Ember.run(function() {\n      if (view) { view.destroy(); }\n    });\n  }\n});\n\ntest(\"base case\", function(){\n  var height = 500, rowHeight = 50, width = 100, elementWidth = 50;\n\n  view = Ember.ListView.create({\n    height: height,\n    rowHeight: rowHeight,\n    content: helper.generateContent(5),\n    width: width,\n    elementWidth: elementWidth,\n    scrollTop: 0\n  });\n\n  equal(view.get(\'scrollTop\'), 0);\n\n  Ember.run(function(){\n    view.set(\'width\', 150);\n  });\n\n  equal(view.get(\'scrollTop\'), 0);\n});\n\ntest(\"scroll but within content length\", function(){\n  var height = 500, rowHeight = 50, width = 100, elementWidth = 50;\n\n  view = Ember.ListView.create({\n    height: height,\n    rowHeight: rowHeight,\n    content: helper.generateContent(5),\n    width: width,\n    elementWidth: elementWidth,\n    scrollTop: 100\n  });\n\n  equal(view.get(\'scrollTop\'), 100);\n\n  Ember.run(function(){\n    view.set(\'width\', 150);\n  });\n\n  equal(view.get(\'scrollTop\'), 0);\n});\n\ntest(\"scroll but beyond content length\", function(){\n  var height = 500, rowHeight = 50, width = 100, elementWidth = 50;\n\n  view = Ember.ListView.create({\n    height: height,\n    rowHeight: rowHeight,\n    content: helper.generateContent(5),\n    width: width,\n    elementWidth: elementWidth,\n    scrollTop: 1000\n  });\n\n  equal(view.get(\'scrollTop\'), 1000);\n\n  Ember.run(function(){\n    view.set(\'width\', 150);\n  });\n\n  equal(view.get(\'scrollTop\'), 0);\n});\n\n})();//@ sourceURL=scroll_top_test.js");

eval("(function() {var view, helper;\nhelper = window.helper;\n\nfunction appendView() {\n  Ember.run(function() {\n    view.appendTo(\'#qunit-fixture\');\n  });\n}\n\nmodule(\"Ember.ListView unit: - startingIndex\", {\n  teardown: function() {\n    Ember.run(function() {\n      if (view) { view.destroy(); }\n    });\n  }\n});\n\ntest(\"base case\", function(){\n  var height = 500, rowHeight = 50, width = 100, elementWidth = 50;\n\n  view = Ember.ListView.create({\n    height: height,\n    rowHeight: rowHeight,\n    content: helper.generateContent(5),\n    width: width,\n    elementWidth: elementWidth,\n    scrollTop: 0\n  });\n\n  equal(view._startingIndex(), 0);\n});\n\ntest(\"scroll but within content length\", function(){\n  var height = 500, rowHeight = 50, width = 100, elementWidth = 50;\n\n  view = Ember.ListView.create({\n    height: height,\n    rowHeight: rowHeight,\n    content: helper.generateContent(5),\n    width: width,\n    elementWidth: elementWidth,\n    scrollTop: 100\n  });\n\n  equal(view._startingIndex(), 0);\n});\n\ntest(\"scroll but beyond content length\", function(){\n  var height = 500, rowHeight = 50, width = 100, elementWidth = 50;\n\n  view = Ember.ListView.create({\n    height: height,\n    rowHeight: rowHeight,\n    content: helper.generateContent(5),\n    width: width,\n    elementWidth: elementWidth,\n    scrollTop: 1000\n  });\n\n  equal(view._startingIndex(), 0);\n});\n\n\ntest(\"larger list\", function(){\n  var height = 500, rowHeight = 50, width = 100, elementWidth = 50;\n\n  // 2x2 grid\n  view = Ember.ListView.create({\n    height: height,\n    rowHeight: rowHeight,\n    content: helper.generateContent(50),\n    width: width,\n    elementWidth: elementWidth,\n    scrollTop: 1000\n  });\n\n  equal(view._startingIndex(), 28);\n});\n\ntest(\"larger list\", function(){\n  var height = 200, rowHeight = 100, width = 100, elementWidth = 50;\n\n  view = Ember.ListView.create({\n    height: height,\n    rowHeight: rowHeight,\n    content: helper.generateContent(40),\n    width: width,\n    elementWidth: width,\n    scrollTop: 100\n  });\n\n  equal(view._startingIndex(), 1);\n});\n\n})();//@ sourceURL=starting_index_test.js");

eval("(function() {var view, helper;\nhelper = window.helper;\n\nfunction appendView() {\n  Ember.run(function() {\n    view.appendTo(\'#qunit-fixture\');\n  });\n}\n\nmodule(\"Ember.ListView unit - totalHeight\", {\n  teardown: function() {\n    Ember.run(function() {\n      if (view) { view.destroy(); }\n    });\n  }\n});\n\ntest(\"single column\", function(){\n  var height = 500, rowHeight = 50;\n\n  view = Ember.ListView.create({\n    height: height,\n    rowHeight: rowHeight,\n    content: helper.generateContent(20)\n  });\n\n  equal(view.get(\'totalHeight\'), 1000);\n});\n\ntest(\"even\", function(){\n  var height = 500, rowHeight = 50, width = 100, elementWidth = 50;\n\n  view = Ember.ListView.create({\n    height: height,\n    rowHeight: rowHeight,\n    content: helper.generateContent(20),\n    width: width,\n    elementWidth: elementWidth\n  });\n\n  equal(view.get(\'totalHeight\'), 500);\n});\n\ntest(\"odd\", function(){\n  var height = 500, rowHeight = 50, width = 100, elementWidth = 50;\n\n  view = Ember.ListView.create({\n    height: height,\n    rowHeight: rowHeight,\n    content: helper.generateContent(21),\n    width: width,\n    elementWidth: elementWidth\n  });\n\n  equal(view.get(\'totalHeight\'), 550);\n});\n\ntest(\"with bottomPadding\", function(){\n  var height = 500, rowHeight = 50, width = 100, elementWidth = 50;\n\n  view = Ember.ListView.create({\n    height: height,\n    rowHeight: rowHeight,\n    content: helper.generateContent(20),\n    width: width,\n    elementWidth: elementWidth,\n    bottomPadding: 25\n  });\n\n  equal(view.get(\'totalHeight\'), 525);\n});\n})();//@ sourceURL=total_height_test.js");

eval("(function() {var css, view, helper, nextTopPosition;\nhelper = window.helper;\nnextTopPosition = 0;\n\n\n\nfunction appendView() {\n  Ember.run(function() {\n    view.appendTo(\'#qunit-fixture\');\n  });\n}\n\nfunction fireEvent(type, target) {\n  var hasTouch = (\'ontouchstart\' in window) || window.DocumentTouch && document instanceof window.DocumentTouch,\n    events = hasTouch ? {\n      start: \'touchstart\',\n      move: \'touchmove\',\n      end: \'touchend\'\n    } : {\n      start: \'mousedown\',\n      move: \'mousemove\',\n      end: \'mouseend\'\n    },\n    e = document.createEvent(\'Event\');\n  if (hasTouch) {\n    e.touches = [{target: target}];\n  } else {\n    e.which = 1;\n  }\n  e.initEvent(events[type], true, true);\n  target.dispatchEvent(e);\n}\n\nmodule(\"Ember.VirtualListView pull to refresh acceptance\", {\n  setup: function() {\n    window.Scroller = function(callback, opts){\n      this.callback = callback;\n      this.opts = opts;\n      this.scrollTo = function(left, top, zoom) {\n        view._scrollerTop = top;\n        view._scrollContentTo(Math.max(0, top));\n      };\n      this.setDimensions = function() { };\n      this.doTouchStart = function() {};\n      this.doTouchMove = function() {\n        this.scrollTo(0, nextTopPosition, 1);\n      };\n      this.activatePullToRefresh = function(pullToRefreshHeight, activateCallback, deactivateCallback, startCallback){\n        this.pullToRefreshHeight = pullToRefreshHeight;\n        this.activateCallback = activateCallback;\n        this.deactivateCallback = deactivateCallback;\n        this.startCallback = startCallback;\n      };\n      this.finishPullToRefresh = function(){\n        this.finishPullToRefreshCalled = true;\n      };\n      this.doTouchEnd = function() {};\n    };\n\n    css = Ember.$(\"<style>\" +\n            \".ember-list-view {\" +\n            \"  overflow: auto;\" +\n            \"  position: relative;\" +\n            \"}\" +\n            \".ember-list-item-view {\" +\n            \"  position: absolute;\" +\n            \"}\" +\n            \".is-selected {\" +\n            \"  background: red;\" +\n            \"}\" +\n            \"</style>\").appendTo(\'head\');\n  },\n  teardown: function() {\n    css.remove();\n\n    Ember.run(function() {\n      if (view) { view.destroy(); }\n    });\n  }\n});\n\ntest(\"When pulling below zero, show the pull to refresh view\", function() {\n  expect(12);\n  view = Ember.VirtualListView.create({\n    content: helper.generateContent(6),\n    height: 150,\n    rowHeight: 50,\n    pullToRefreshViewClass: Ember.View.extend({\n      classNames: [\'pull-to-refresh\'],\n      template: Ember.Handlebars.compile(\"Pull to refresh...\")\n    }),\n    pullToRefreshViewHeight: 75,\n    activatePullToRefresh: function() {\n      this.pullToRefreshActivated = true;\n    },\n    deactivatePullToRefresh: function() {\n      this.pullToRefreshDeactivated = true;\n    },\n    startRefresh: function(finishRefresh) {\n      this.pullToRefreshStarted = true;\n      var view = this;\n      stop();\n      setTimeout(function(){\n        start();\n        ok(view.pullToRefreshView.get(\'refreshing\'), \'sets refreshing property on refresh view\');\n        finishRefresh();\n        ok(view.scroller.finishPullToRefreshCalled, \'calls back to scroller\');\n        ok(!view.pullToRefreshView.get(\'refreshing\'), \'unsets refreshing property on refresh view\');\n      }, 0);\n    }\n  });\n\n  appendView();\n\n  var pullToRefreshElement = view.$(\'.pull-to-refresh\')[0];\n  ok(pullToRefreshElement, \'pullToRefreshElement was rendered\');\n\n  Ember.run(function() {\n    view.scrollTo(150);\n  });\n\n  pullToRefreshElement = view.$(\'.pull-to-refresh\')[0];\n  ok(pullToRefreshElement, \'pullToRefreshElement was rendered\');\n\n  equal(view.scroller.pullToRefreshHeight, 75, \'informs scroller of pullToRefreshHeight\');\n  equal(helper.extractPosition(view._childViews[0].get(\'element\')).y, -75, \'positions pullToRefreshElement\');\n\n  view.scroller.activateCallback();\n  ok(view.pullToRefreshActivated, \'triggers hook function on activateCallback\');\n  ok(view.pullToRefreshView.get(\'active\'), \'sets active property on refresh view\');\n\n  view.scroller.deactivateCallback();\n  ok(view.pullToRefreshDeactivated, \'triggers hook function on deactivateCallback\');\n  ok(!view.pullToRefreshView.get(\'active\'), \'unsets active property on refresh view\');\n\n  view.scroller.startCallback();\n  ok(view.pullToRefreshStarted, \'triggers hook function on startCallback\');\n});\n})();//@ sourceURL=virtual_list_pull_to_refresh_test.js");

eval("(function() {var css, view, helper, nextTopPosition;\nhelper = window.helper;\nnextTopPosition = 0;\n\n\nfunction appendView() {\n  Ember.run(function() {\n    view.appendTo(\'#qunit-fixture\');\n  });\n}\n\nfunction fireEvent(type, target) {\n  var hasTouch = (\'ontouchstart\' in window) || window.DocumentTouch && document instanceof window.DocumentTouch,\n    events = hasTouch ? {\n      start: \'touchstart\',\n      move: \'touchmove\',\n      end: \'touchend\'\n    } : {\n      start: \'mousedown\',\n      move: \'mousemove\',\n      end: \'mouseend\'\n    },\n    e = document.createEvent(\'Event\');\n  if (hasTouch) {\n    e.touches = [{target: target}];\n  } else {\n    e.which = 1;\n  }\n  e.initEvent(events[type], true, true);\n  target.dispatchEvent(e);\n}\n\nmodule(\"Ember.VirtualListView scrollerstart acceptance\", {\n  setup: function() {\n    window.Scroller = function(callback, opts){\n      this.callback = callback;\n      this.opts = opts;\n      this.scrollTo = function(left, top, zoom) {\n        view._scrollerTop = top;\n        view._scrollContentTo(Math.max(0, top));\n      };\n      this.setDimensions = function() { };\n      this.doTouchStart = function() {};\n      this.doTouchMove = function() {\n        this.scrollTo(0, nextTopPosition, 1);\n      };\n      this.doTouchEnd = function() {};\n    };\n\n    css = Ember.$(\"<style>\" +\n            \".ember-list-view {\" +\n            \"  overflow: auto;\" +\n            \"  position: relative;\" +\n            \"}\" +\n            \".ember-list-item-view {\" +\n            \"  position: absolute;\" +\n            \"}\" +\n            \".is-selected {\" +\n            \"  background: red;\" +\n            \"}\" +\n            \"</style>\").appendTo(\'head\');\n  },\n  teardown: function() {\n    css.remove();\n\n    Ember.run(function() {\n      if (view) { view.destroy(); }\n    });\n  }\n});\n\ntest(\"When scrolling begins, fire a scrollerstart event on the original target\", function() {\n  expect(1);\n  view = Ember.VirtualListView.create({\n    content: helper.generateContent(4),\n    height: 150,\n    rowHeight: 50\n  });\n\n  appendView();\n\n  var childElement = view.$(\'.ember-list-item-view\')[0];\n  Ember.$(document).on(\"scrollerstart\", function(e){\n    ok(e.target === childElement, \"fired scrollerstart on original target\");\n  });\n\n  Ember.run(function(){\n    nextTopPosition = nextTopPosition + 1;\n    fireEvent(\'start\', childElement);\n    fireEvent(\'move\', childElement);\n  });\n\n  Ember.$(document).off(\"scrollerstart\");\n});\n\ntest(\"fire scrollerstart event only once per scroll session\", function() {\n  view = Ember.VirtualListView.create({\n    content: helper.generateContent(4),\n    height: 150,\n    rowHeight: 50\n  });\n\n  appendView();\n\n  var childElement = view.$(\'.ember-list-item-view\')[0],\n      scrollerstartCount = 0;\n\n  Ember.$(document).on(\"scrollerstart\", function(e){\n    scrollerstartCount = scrollerstartCount + 1;\n  });\n\n  Ember.run(function(){\n    nextTopPosition = nextTopPosition + 1;\n\n    fireEvent(\'start\', childElement);\n    fireEvent(\'move\', childElement);\n    fireEvent(\'move\', childElement);\n  });\n\n  equal(scrollerstartCount, 1, \"scrollerstart should fire only once per scroll session\");\n\n  Ember.run(function(){\n    fireEvent(\'end\', childElement);\n    nextTopPosition = nextTopPosition + 1;\n    fireEvent(\'start\', childElement);\n    fireEvent(\'move\', childElement);\n  });\n\n  equal(scrollerstartCount, 2, \"scrollerstart should fire again for a new scroll session\");\n\n  Ember.$(document).off(\"scrollerstart\");\n});\n\ntest(\"doesn\'t fire scrollerstart event when view did not actually scroll vertically\", function() {\n  view = Ember.VirtualListView.create({\n    content: helper.generateContent(4),\n    height: 150,\n    rowHeight: 50\n  });\n\n  appendView();\n\n  var childElement = view.$(\'.ember-list-item-view\')[0],\n      scrollerstartCount = 0;\n\n  Ember.$(document).on(\"scrollerstart\", function(e){\n    scrollerstartCount = scrollerstartCount + 1;\n  });\n\n  Ember.run(function(){\n    nextTopPosition = 0;\n    fireEvent(\'start\', childElement);\n    fireEvent(\'move\', childElement);\n  });\n\n  equal(scrollerstartCount, 0, \"scrollerstart should not fire if view did not scroll\");\n\n  Ember.run(function(){\n    nextTopPosition = nextTopPosition + 1;\n    fireEvent(\'move\', childElement);\n  });\n\n  equal(scrollerstartCount, 1, \"scrollerstart should fire if view scrolled\");\n\n  Ember.$(document).off(\"scrollerstart\");\n});\n\ntest(\"When pulling below zero, still fire a scrollerstart event\", function() {\n  expect(1);\n  view = Ember.VirtualListView.create({\n    content: helper.generateContent(4),\n    height: 150,\n    rowHeight: 50\n  });\n\n  appendView();\n\n  var childElement = view.$(\'.ember-list-item-view\')[0];\n  Ember.$(document).on(\"scrollerstart\", function(e){\n    ok(true, \"fired scrollerstart\");\n  });\n\n  Ember.run(function(){\n    nextTopPosition = nextTopPosition - 10;\n    fireEvent(\'start\', childElement);\n    fireEvent(\'move\', childElement);\n  });\n\n  Ember.$(document).off(\"scrollerstart\");\n});\n\n})();//@ sourceURL=virtual_list_view_scrollerstart_test.js");

eval("(function() {var setDimensionsCalled = 0,\n    css, view, helper, scrollingDidCompleteCount,\n    didInitializeScrollerCount, scrollerDimensionsDidChange;\n\nhelper = window.helper;\n\n\nfunction appendView() {\n  Ember.run(function() {\n    view.appendTo(\'#qunit-fixture\');\n  });\n}\n\nmodule(\"Ember.VirtualListView Acceptance\", {\n  setup: function() {\n    window.Scroller = function(callback, opts){\n      this.callback = callback;\n      this.opts = opts;\n      this.scrollTo = function(left, top, zoom) {\n        view._scrollContentTo(Math.max(0, top));\n      };\n      this.setDimensions = function() { setDimensionsCalled = setDimensionsCalled + 1; };\n      this.doTouchStart = function() {};\n      this.doTouchMove = function() {};\n      this.doTouchEnd = function() {};\n    }\n\n    css = Ember.$(\"<style>\" +\n            \".ember-list-view {\" +\n            \"  overflow: auto;\" +\n            \"  position: relative;\" +\n            \"}\" +\n            \".ember-list-item-view {\" +\n            \"  position: absolute;\" +\n            \"}\" +\n            \".is-selected {\" +\n            \"  background: red;\" +\n            \"}\" +\n            \"</style>\").appendTo(\'head\');\n  },\n  teardown: function() {\n    css.remove();\n\n    Ember.run(function() {\n      if (view) { view.destroy(); }\n    });\n  }\n});\n\ntest(\"should exist\", function() {\n  view = Ember.VirtualListView.create({\n    height: 500,\n    rowHeight: 50\n  });\n  appendView();\n  ok(view);\n});\n\ntest(\"should render a subset of the full content, based on the height, in the correct positions\", function() {\n  var content = helper.generateContent(100),\n      height = 500,\n      rowHeight = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      });\n\n  view = Ember.VirtualListView.create({\n    content: content,\n    height: height,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass\n  });\n\n  appendView();\n\n  equal(view.get(\'element\').style.height, \"500px\", \"The list view height is correct\");\n  // equal(view.$(\':last\')[0].style.height, \"5000px\", \"The scrollable view has the correct height\");\n\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n\n  equal(view.$(\'.ember-list-item-view\').length, 11, \"The correct number of rows were rendered\");\n  equal(Ember.$(positionSorted[0]).text(), \"Item 1\");\n  equal(Ember.$(positionSorted[10]).text(), \"Item 11\");\n\n  deepEqual(helper.itemPositions(view).map(yPosition), [0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500]);\n});\n\ntest(\"should update dimensions of scroller when totalHeight changes\", function() {\n  var content = helper.generateContent(100),\n      height = 500,\n      rowHeight = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      });\n\n  view = Ember.VirtualListView.create({\n    content: content,\n    height: height,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass\n  });\n\n  appendView();\n  setDimensionsCalled = 0;\n\n  Ember.run(function(){\n    content.pushObject({name: \"New Item\"});\n  });\n\n  equal(setDimensionsCalled, 1, \"setDimensions was called on the scroller\");\n});\n\ntest(\"lifecycle events\", function(){\n  var content = helper.generateContent(100),\n      height = 500,\n      rowHeight = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      }),\n    scrollingDidCompleteCount = 0,\n    didInitializeScrollerCount = 0,\n    scrollerDimensionsDidChangeCount = 0;\n\n  view = Ember.VirtualListView.extend({\n    init: function(){\n      // Some hooks for testing\n      this.on(\'didInitializeScroller\', function(){ didInitializeScrollerCount++; });\n      this.on(\'scrollingDidComplete\',  function(){ scrollingDidCompleteCount++;  });\n      this.on(\'scrollerDimensionsDidChange\',  function(){ scrollerDimensionsDidChangeCount++;  });\n      this._super();\n    }\n  }).create({\n    content: content,\n    height: height,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass,\n    scrollTop: 475\n  });\n\n  equal(didInitializeScrollerCount, 1, \'didInitializeScroller event was fired on create\');\n  equal(scrollerDimensionsDidChangeCount, 1, \'scrollerDimensionsDidChangeCount event was fired on create\');\n  equal(scrollingDidCompleteCount, 0, \'scrollingDidCompleteCount event was NOT fired on create\');\n\n  appendView();\n\n  Ember.run(function(){\n    view.set(\'height\', height + 1);\n  });\n\n  equal(didInitializeScrollerCount, 1, \'didInitializeScroller event was fired on create\');\n  equal(scrollerDimensionsDidChangeCount, 2, \'scrollerDimensionsDidChangeCount event was fired on create\');\n  equal(scrollingDidCompleteCount, 0, \'scrollingDidCompleteCount event was NOT fired on create\');\n\n  Ember.run(function(){\n    view.scrollTo(0, true);\n    view.scroller.opts.scrollingComplete();\n  });\n\n  equal(didInitializeScrollerCount, 1, \'didInitializeScroller event was fired on create\');\n  equal(scrollerDimensionsDidChangeCount, 2, \'scrollerDimensionsDidChangeCount event was fired on create\');\n  equal(scrollingDidCompleteCount, 1, \'scrollingDidCompleteCount event was NOT fired on create\');\n});\n\ntest(\"should render correctly with an initial scrollTop\", function() {\n  var content = helper.generateContent(100),\n      height = 500,\n      rowHeight = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      });\n\n  view = Ember.VirtualListView.create({\n    content: content,\n    height: height,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass,\n    scrollTop: 475\n  });\n\n  appendView();\n\n  equal(view.$(\'.ember-list-item-view\').length, 11, \"The correct number of rows were rendered\");\n\n  var positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n\n  equal(Ember.$(positionSorted[0]).text(), \"Item 10\");\n  equal(Ember.$(positionSorted[10]).text(), \"Item 20\");\n\n  deepEqual(helper.itemPositions(view).map(yPosition), [450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950], \"The rows are in the correct positions\");\n});\n\ntest(\"should be programatically scrollable\", function() {\n  var content = helper.generateContent(100),\n      height = 500,\n      rowHeight = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      });\n\n  view = Ember.VirtualListView.create({\n    content: content,\n    height: height,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass\n  });\n\n  appendView();\n\n  Ember.run(function() {\n    view.scrollTo(475);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 11, \"The correct number of rows were rendered\");\n  deepEqual(helper.itemPositions(view).map(yPosition), [450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950], \"The rows are in the correct positions\");\n});\n\nfunction yPosition(position){\n  return position.y;\n}\n\nfunction xPosition(position){\n  return position.x;\n}\n\ntest(\"height change\", function(){\n  var content = helper.generateContent(100),\n      height = 500,\n      rowHeight = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      });\n\n  view = Ember.VirtualListView.create({\n    content: content,\n    height: height,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass\n  });\n\n  appendView();\n\n  equal(view.$(\'.ember-list-item-view\').length, 11, \"The correct number of rows were rendered\");\n  deepEqual(helper.itemPositions(view).map(yPosition), [0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500], \"The rows are in the correct positions\");\n\n  Ember.run(function() {\n    view.set(\'height\', 100);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 3, \"The correct number of rows were rendered\");\n  deepEqual(helper.itemPositions(view).map(yPosition), [0, 50, 100], \"The rows are in the correct positions\");\n\n  Ember.run(function() {\n    view.set(\'height\', 50);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 2, \"The correct number of rows were rendered\");\n  deepEqual(helper.itemPositions(view).map(yPosition), [0, 50], \"The rows are in the correct positions\");\n\n  Ember.run(function() {\n    view.set(\'height\', 100);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 3, \"The correct number of rows were rendered\");\n  deepEqual(helper.itemPositions(view).map(yPosition), [0, 50, 100], \"The rows are in the correct positions\" );\n});\n\ntest(\"height and width change after with scroll – simple\", function(){\n  // start off with 2x3 grid visible and 10 elements, at top of scroll\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\n  //\n  // x x  --|\n  // x x    |- viewport\n  // x x  --|\n  // + +\n  // 0 0\n  var content = helper.generateContent(10),\n      width = 100,\n      height = 150,\n      rowHeight = 50,\n      elementWidth = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"A:{{name}}{{view view.NestedViewClass}}\"),\n        NestedViewClass: Ember.View.extend({\n          tagName: \'span\',\n          template: Ember.Handlebars.compile(\"B:{{name}}\")\n        })\n      });\n\n  view = Ember.VirtualListView.create({\n    content: content,\n    width: width,\n    height: height,\n    rowHeight: rowHeight,\n    elementWidth: elementWidth,\n    itemViewClass: itemViewClass,\n    scrollTop: 0\n  });\n\n  appendView();\n\n  deepEqual(helper.itemPositions(view), [\n            { x:  0, y:    0 }, { x: 50, y:    0 },\n            { x:  0, y:   50 }, { x: 50, y:   50 },\n            { x:  0, y:  100 }, { x: 50, y:  100 },\n            { x:  0, y:  150 }, { x: 50, y:  150 }\n            ], \"initial render: The rows are rendered in the correct positions\");\n\n  equal(view.$(\'.ember-list-item-view\').length, 8, \"initial render: The correct number of rows were rendered\");\n\n  // user is scrolled near the bottom of the list\n  Ember.run(function(){\n    view.scrollTo(101);\n  });\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\n  //\n  // 0 0\n  // 0 0\n  // x x --|\n  // x x   |- viewport\n  // x x --|\n  // o o\n\n  equal(view.$(\'.ember-list-item-view\').length, 8, \"after scroll: The correct number of rows were rendered\");\n\n  deepEqual(helper.itemPositions(view), [\n              { x: 0, y:  50 }, { x: 50, y:  50 },\n              { x: 0, y: 100 }, { x: 50, y: 100 },\n              { x: 0, y: 150 }, { x: 50, y: 150 },\n/* padding */ { x: 0, y: 200 }, { x: 50, y: 200 }], \"after scroll: The rows are in the correct positions\");\n\n  // rotate to a with 3x2 grid visible and 8 elements\n  Ember.run(function() {\n    view.set(\'width\',  150);\n    view.set(\'height\', 100);\n  });\n\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\n  //\n  // 0 0 0\n  // x x x\n  // x x x --|\n  // x o o --|- viewport\n\n  equal(view.$(\'.ember-list-item-view\').length, 9, \"after width + height change: the correct number of rows were rendered\");\n  deepEqual(helper.itemPositions(view), [\n    /*              */  { x:  50, y:   0 }, { x: 100, y:   0 },\n    { x:   0, y:  50 }, { x:  50, y:  50 }, { x: 100, y:  50 },\n    { x:   0, y: 100 }, { x:  50, y: 100 }, { x: 100, y: 100 },\n    { x:   0, y: 150 }], \"after width + height change: The rows are in the correct positions\");\n\n  var sortedElements = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  var texts = Ember.$.map(sortedElements, function(el){ return Ember.$(el).text(); });\n  deepEqual(texts, [\n    \'A:Item 2B:Item 2\',\n    \'A:Item 3B:Item 3\',\n    \'A:Item 4B:Item 4\',\n    \'A:Item 5B:Item 5\',\n    \'A:Item 6B:Item 6\',\n    \'A:Item 7B:Item 7\',\n    \'A:Item 8B:Item 8\',\n    \'A:Item 9B:Item 9\',\n    \'A:Item 10B:Item 10\',\n  ], \'after width + height change: elements should be rendered in expected position\');\n});\n\ntest(\"height and width change after with scroll – 1x2 -> 2x2 with 5 items\", function() {\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\n  //\n  // x  --|\n  // x  --|- viewport\n  // +\n  // 0\n  // 0\n  var content = helper.generateContent(5),\n      width = 50,\n      height = 100,\n      rowHeight = 50,\n      elementWidth = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"A:{{name}}{{view view.NestedViewClass}}\"),\n        NestedViewClass: Ember.View.extend({\n          tagName: \'span\',\n          template: Ember.Handlebars.compile(\"B:{{name}}\")\n        })\n      });\n\n  view = Ember.VirtualListView.create({\n    content: content,\n    width: width,\n    height: height,\n    rowHeight: rowHeight,\n    elementWidth: elementWidth,\n    itemViewClass: itemViewClass,\n    scrollTop: 0\n  });\n\n  appendView();\n\n  deepEqual(helper.itemPositions(view), [\n            { x:  0, y:    0 },\n            { x:  0, y:   50 },\n            { x:  0, y:  100 }\n            ], \"initial render: The rows are rendered in the correct positions\");\n\n  equal(view.$(\'.ember-list-item-view\').length, 3, \"initial render: The correct number of rows were rendered\");\n\n  // user is scrolled near the bottom of the list\n  Ember.run(function(){\n    view.scrollTo(151);\n  });\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\n  //\n  // 0\n  // 0\n  // 0\n  // x --|\n  // x --|- viewport\n  // o\n  equal(view.$(\'.ember-list-item-view\').length, 3, \"after scroll: The correct number of rows were rendered\");\n\n  deepEqual(helper.itemPositions(view), [\n              { x: 0, y: 100 },\n              { x: 0, y: 150 },\n/* padding */ { x: 0, y: 200 }], \"after scroll: The rows are in the correct positions\");\n\n  // rotate to a with 2x2 grid visible and 8 elements\n  Ember.run(function() {\n    view.set(\'width\',  100);\n    view.set(\'height\', 100);\n  });\n\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\n  //\n  // 0 0\n  // x x --|\n  // x o --|- viewport\n  // o\n  equal(view.$(\'.ember-list-item-view\').length, 5, \"after width + height change: the correct number of rows were rendered\");\n\n  deepEqual(helper.itemPositions(view), [\n    { x: 0, y:   0 }, { x: 50, y:   0 },\n    { x: 0, y:  50 }, { x: 50, y:  50 },\n    { x: 0, y: 100 }\n  ], \"The rows are in the correct positions\");\n\n  var sortedElements = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  var texts = Ember.$.map(sortedElements, function(el){ return Ember.$(el).text(); });\n  deepEqual(texts, [\n    \'A:Item 1B:Item 1\', \'A:Item 2B:Item 2\',\n    \'A:Item 3B:Item 3\', \'A:Item 4B:Item 4\',\n    \'A:Item 5B:Item 5\'\n  ], \'elements should be rendered in expected position\');\n});\n\ntest(\"elementWidth change\", function(){\n  var i,\n      positionSorted,\n      content = helper.generateContent(100),\n      height = 200,\n      width = 200,\n      rowHeight = 50,\n      elementWidth = 100,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      });\n\n  view = Ember.VirtualListView.create({\n    content: content,\n    height: height,\n    width: width,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass,\n    elementWidth: elementWidth\n  });\n\n  appendView();\n\n  equal(view.$(\'.ember-list-item-view\').length, 10, \"The correct number of rows were rendered\");\n  deepEqual(helper.itemPositions(view), [\n            { x:0,   y: 0   },\n            { x:100, y: 0   },\n            { x:0,   y: 50  },\n            { x:100, y: 50  },\n            { x:0 ,  y: 100 },\n            { x:100, y: 100 },\n            { x:0,   y: 150 },\n            { x:100, y: 150 },\n            { x:0,   y: 200 },\n            { x:100, y: 200 }], \"The rows are in the correct positions\");\n\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n\n  for(i = 0; i < 10; i++) {\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i+1));\n  }\n\n  Ember.run(function() {\n    view.set(\'width\', 100);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 5, \"The correct number of rows were rendered\");\n\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n\n  deepEqual(helper.itemPositions(view), [\n            { x: 0, y: 0},\n            { x: 0, y: 50},\n            { x: 0, y: 100},\n            { x: 0, y: 150},\n            { x: 0, y: 200}\n  ], \"The rows are in the correct positions\");\n\n  for(i = 0; i < 5; i++) {\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i+1));\n  }\n\n  Ember.run(function() {\n    view.set(\'width\', 200);\n  });\n\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  equal(view.$(\'.ember-list-item-view\').length, 10, \"The correct number of rows were rendered\");\n  deepEqual(helper.itemPositions(view), [\n            { x:0,   y: 0   },\n            { x:100, y: 0   },\n            { x:0,   y: 50  },\n            { x:100, y: 50  },\n            { x:0 ,  y: 100 },\n            { x:100, y: 100 },\n            { x:0,   y: 150 },\n            { x:100, y: 150 },\n            { x:0,   y: 200 },\n            { x:100, y: 200 }], \"The rows are in the correct positions\");\n\n  for(i = 0; i < 10; i++) {\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i+1));\n  }\n});\n\ntest(\"elementWidth change with scroll\", function(){\n  var i,\n      positionSorted,\n      content = helper.generateContent(100),\n      height = 200,\n      width = 200,\n      rowHeight = 50,\n      elementWidth = 100,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      });\n\n  view = Ember.VirtualListView.create({\n    content: content,\n    height: height,\n    width: width,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass,\n    elementWidth: elementWidth\n  });\n\n  appendView();\n\n  Ember.run(function(){\n    view.scrollTo(1000);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 10, \"after scroll 1000 - The correct number of rows were rendered\");\n  deepEqual(helper.itemPositions(view), [\n            { x:0,   y: 1000 },\n            { x:100, y: 1000 },\n            { x:0,   y: 1050 },\n            { x:100, y: 1050 },\n            { x:0 ,  y: 1100 },\n            { x:100, y: 1100 },\n            { x:0,   y: 1150 },\n            { x:100, y: 1150 },\n            { x:0,   y: 1200 },\n            { x:100, y: 1200 }], \"after scroll 1000 - The rows are in the correct positions\");\n\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n\n  for (i = 0; i < 10; i++) {\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i + 41));\n  }\n\n  Ember.run(function() {\n    view.set(\'width\', 100);\n  });\n\n  equal(view.$(\'.ember-list-item-view\').length, 5, \" after width 100 -The correct number of rows were rendered\");\n\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n\n  deepEqual(helper.itemPositions(view), [\n            { x:0,   y: 2000 },\n            { x:0,   y: 2050 },\n            { x:0 ,  y: 2100 },\n            { x:0,   y: 2150 },\n            { x:0,   y: 2200 }], \"after width 100 - The rows are in the correct positions\");\n\n  for(i = 0; i < 5; i++) {\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i + 41));\n  }\n\n  Ember.run(function() {\n    view.set(\'width\', 200);\n  });\n\n  positionSorted = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  equal(view.$(\'.ember-list-item-view\').length, 10, \"after width 200 - The correct number of rows were rendered\");\n  deepEqual(helper.itemPositions(view), [\n            { x:0,   y: 1000 },\n            { x:100, y: 1000 },\n            { x:0,   y: 1050 },\n            { x:100, y: 1050 },\n            { x:0 ,  y: 1100 },\n            { x:100, y: 1100 },\n            { x:0,   y: 1150 },\n            { x:100, y: 1150 },\n            { x:0,   y: 1200 },\n            { x:100, y: 1200 }], \"after width 200 - The rows are in the correct positions\");\n\n  for(i = 0; i < 10; i++) {\n    equal(Ember.$(positionSorted[i]).text(), \"Item \" + (i + 41));\n  }\n});\n\ntest(\"A property of an item can be changed\", function() {\n  var content = helper.generateContent(100),\n      height = 500,\n      rowHeight = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"{{name}}\")\n      });\n\n  view = Ember.VirtualListView.create({\n    content: content,\n    height: height,\n    rowHeight: rowHeight,\n    itemViewClass: itemViewClass\n  });\n\n  appendView();\n\n  //Change name\n  Ember.run(function() {\n    content.set(\'0.name\', \'First change\');\n  });\n\n  equal(view.$(\'.ember-list-item-view:eq(0)\').text(), \"First change\", \"The item\'s name has been updated\");\n\n  //Scroll down, change name, and scroll back up\n  Ember.run(function() {\n    view.scrollTo(600);\n  });\n\n  Ember.run(function() {\n    content.set(\'0.name\', \'Second change\');\n  });\n\n  Ember.run(function() {\n    view.scrollTo(0);\n  });\n\n  equal(view.$(\'.ember-list-item-view:eq(0)\').text(), \"Second change\", \"The item\'s name has been updated\");\n\n});\n\ntest(\"The list view is wrapped in an extra div to support JS-emulated scrolling\", function() {\n  view = Ember.VirtualListView.create({\n    content: Ember.A(),\n    height: 100,\n    rowHeight: 50\n  });\n\n  appendView();\n\n  equal(view.$(\'.ember-list-container\').length, 1, \"expected a ember-list-container wrapper div\");\n  equal(view.$(\'.ember-list-container > .ember-list-item-view\').length, 0, \"expected no ember-list-items inside the wrapper div\");\n});\n\ntest(\"When destroyed, short-circuits syncChildViews\", function() {\n  expect(1);\n\n  view = Ember.VirtualListView.create({\n    content: helper.generateContent(4),\n    height: 150,\n    rowHeight: 50\n  });\n\n  appendView();\n\n  Ember.run(function(){\n    view.destroy();\n  });\n\n  Ember.run(function(){\n    view._syncChildViews();\n  });\n\n  ok(true, \'made it!\');\n});\n\ntest(\"adding a column, when everything is already within viewport\", function(){\n  // start off with 2x3 grid visible and 4 elements\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element, ?: no element\n  //\n  // x x  --|\n  // x x    |- viewport\n  // ? ?  --|\n  var content = helper.generateContent(4),\n      width = 100,\n      height = 150,\n      rowHeight = 50,\n      elementWidth = 50,\n      itemViewClass = Ember.ListItemView.extend({\n        template: Ember.Handlebars.compile(\"A:{{name}}{{view view.NestedViewClass}}\"),\n        NestedViewClass: Ember.View.extend({\n          tagName: \'span\',\n          template: Ember.Handlebars.compile(\"B:{{name}}\")\n        })\n      });\n\n  view = Ember.VirtualListView.create({\n    content: content,\n    width: width,\n    height: height,\n    rowHeight: rowHeight,\n    elementWidth: elementWidth,\n    itemViewClass: itemViewClass,\n    scrollTop: 0\n  });\n\n  appendView();\n\n  deepEqual(helper.itemPositions(view), [\n            { x:  0, y:    0 }, { x: 50, y:    0 },\n            { x:  0, y:   50 }, { x: 50, y:   50 }\n            ], \"initial render: The rows are rendered in the correct positions\");\n\n  equal(view.$(\'.ember-list-item-view\').length, 4, \"initial render: The correct number of rows were rendered\");\n\n  // rapid dimension changes\n  Ember.run(function() {\n    view.set(\'width\',  140);\n  });\n\n  Ember.run(function() {\n    view.set(\'width\',  150);\n  });\n\n\n  // x: visible, +: padding w/ element, 0: element not-drawn, o: padding w/o element\n  //\n  // x x x --|\n  // x ? ?   |- viewport\n  // ? ? ? --|\n\n  equal(view.$(\'.ember-list-item-view\').length, 4, \"after width + height change: the correct number of rows were rendered\");\n\n  deepEqual(helper.itemPositions(view), [\n            { x:  0, y:  0 }, { x: 50, y: 0 }, { x: 100, y: 0 },\n            { x:  0, y: 50 }\n            ], \"after width + height change: The rows are in the correct positions\");\n\n  var sortedElements = helper.sortElementsByPosition(view.$(\'.ember-list-item-view\'));\n  var texts = Ember.$.map(sortedElements, function(el){ return Ember.$(el).text(); });\n\n  deepEqual(texts, [\n             \'A:Item 1B:Item 1\',\n             \'A:Item 2B:Item 2\',\n             \'A:Item 3B:Item 3\',\n             \'A:Item 4B:Item 4\'\n            ], \'after width + height change: elements should be rendered in expected position\');\n});\n\ntest(\"Creating a VirtualListView without height and rowHeight properties should throw an exception\", function() {\n  throws(function() {\n    view = Ember.VirtualListView.create({\n      content: helper.generateContent(4)\n    });\n\n    appendView();\n  },\n  /A ListView must be created with a height and a rowHeight./, \"Throws exception.\");\n});\n})();//@ sourceURL=virtual_list_view_test.js");
